# Bungeni Parliamentary Information System - http://www.bungeni.org/
# Copyright (C) 2010 - Africa i-Parliaments - http://www.parliaments.info/
# Licensed under GNU GPL v2 - http://www.gnu.org/licenses/gpl-2.0.txt
#
# RNC Schema for Bungeni Descriptor XML Format
# Created: Mario Ruggier, 28-nov-2012
# 
# Note: Always modify the RNC file - the RNG version is auto-derived from it:
# one way to auto-derive descriptor.rng from this file is:
#   java -jar trang.jar -I rnc -O rng descriptor.rnc generated/descriptor.rng
# 
# $Id$

grammar {
    include "common.rnc"
    
    start = ( UI |
        # custom descriptor, in own file
        element descriptor {
            attribute name { SYMBOL_NAME }, # type_key
            attribute order { xsd:integer }?,
            attribute note { text }?,
            
            # Attrs only in custom descriptors:
            
            attribute archetype { SYMBOL_NAME }, # an archetype key, custom types MUST specify this
            
            # Note: if label/container_label present, the mechanism to 
            # auto-derive the display_name/container_name from name->type_key 
            # will be "hidden" by the specified fixed value.
            attribute label { text }?, # i18n msgid, descriptor.display_name
            attribute container_label { text }?, # i18n msgid, descriptor.container_name
            
            # default sorting settings
            attribute sort_on { SPACE_SEPARATED_TOKENS }?, # field names
            attribute sort_dir { "asc" | "desc" }?,
            
            
            FIELD*,
            CONTAINER*, # only in custom descriptor
            INTEGRITY?
        }
    )
    
    UI = element ui {
        attribute roles { SPACE_SEPARATED_TOKENS }, # (un/qualified) roles
        
        DESCRIPTOR+
    }
    
    DESCRIPTOR = element descriptor {
        attribute name { SYMBOL_NAME }, # type_key
        attribute order { xsd:integer }?,
        attribute note { text }?,
        
        FIELD*,
        INTEGRITY?
    }
    
    FIELD = element field {
        attribute name { SYMBOL_NAME },
        attribute label { text }?, # i18n msgid !+ should really be required in *UI* fields
        attribute description { text }?, # i18n msgid
        attribute required { xsd:boolean }?, # default:false
        attribute value_type { FIELD_VALUE_TYPE }?,
        # vocabulary is required for some render_types
        (
            (
                attribute render_type { FIELD_RENDER_TYPE }?,
                attribute vocabulary { SYMBOL_NAME }?
            )
            | (
                attribute render_type { FIELD_RENDER_TYPE_VOCABULARY }?,
                attribute vocabulary { SYMBOL_NAME }
            )
        )?,
        attribute note { text }?,
        
        # extended | derived 
        (
            # A field may NOT be declared extended if it is defined in super 
            # (archetype) descriptor. Value is one of allowed extended types.
            attribute extended { EXTENDED_PROPERTY_TYPE }?
            |
            attribute derived { SYMBOL_NAME }?
        ),
        
        # each mode token may appear only ONCE in sum of all show/hide elements
        (
            element show {
                attribute modes { list { FORM_MODE+ } },
                # (un/qualified) roles, not present implies ALL ui.@roles
                attribute roles { SPACE_SEPARATED_TOKENS }?,
                attribute note { text }?
            }* & 
            element hide {
                attribute modes { list { FORM_MODE+ } },
                # (un/qualified) roles, not present implies ALL ui.@roles
                attribute roles { SPACE_SEPARATED_TOKENS }?,
                attribute note { text }?
            }*
        )
    }
    
    # UI-traversible container attributes -- is only loaded and instrumented if 
    # the {target_type_key} i.e. the part of the required value of @match that 
    # precedes the ".", is enabled.
    CONTAINER = element container {
        # value of @match is {target_type_key}.{rel_attr_name} and will match
        # all instances of the given type related to this instance via
        # {rel_attr_name} (that is usually a direct or indirect fk field).
        attribute match { token },
        # @name defaults to naming.plural(target_type_key) 
        attribute name { SYMBOL_NAME }?,
        # value of @indirect_key must be the name of a field defined by this type
        # when @indirect_key is not set, the foreign key defined in underlying 
        # data model determines the relation.
        attribute indirect_key { SYMBOL_NAME }?,
        attribute note { text }?
    }
    
    INTEGRITY = element integrity {
        attribute constraints { SPACE_SEPARATED_TOKENS }?, # forms._constraints
        attribute validations { SPACE_SEPARATED_TOKENS }?, # forms._validations
        attribute note { text }?
    }
    
    # enums
    
    FORM_MODE = ("view" | "edit" | "add" | "listing")
    
    FIELD_VALUE_TYPE = (
        "text" |
        "date" | 
        "datetime" |
        "duration" | # !+ this "consumes" 2 columns, so probably have dedicated widget type? entirely 
        "bool"  | # default: True
        "number" |
        "status" |
        "language" |
        "vocabulary" | # !+ should a real value_type e.g. text or number?
        "email" | # "constraint": constraints.check_email
        "login" | # "min_length": 3, "max_length": 20, "constraint": constraints.check_login
        "password" |
        "image" | 
        "file" | 
        "user" | 
        "member" | # !+ should be "archetype generic" e.g. should not assume "member of parliament"
        "signatory" | # !+
        "combined_name" | # !+
        "group"
    )
    
    FIELD_RENDER_TYPE = (
        "text_line" |
        "text_raw" |
        "text_schedule_type" |
        "text_box" |
        "rich_text" |
        "date" |
        "datetime" |
        "bool" |
        "number" |
        "image" |
        "file" |
        "no_input" # !+ remove?
    )
    FIELD_RENDER_TYPE_VOCABULARY = (
        # special other user-conf params: "vocabulary" -> "type:vocabulary, required:True"
        "single_select" | # vocabulary
        "radio" | # vocabulary
        "tree_text" # VocabularyTextField
    )    
    
    EXTENDED_PROPERTY_TYPE = (
        "text" | 
        "translated_text" | 
        "datetime"
    )
}

