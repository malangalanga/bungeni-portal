# Bungeni Parliamentary Information System - http://www.bungeni.org/
# Copyright (C) 2010 - Africa i-Parliaments - http://www.parliaments.info/
# Licensed under GNU GPL v2 - http://www.gnu.org/licenses/gpl-2.0.txt
#
# RNC Schema for Bungeni Workflow XML Format
# Created: Mario Ruggier, 22-nov-2012
# 
# Note: Always modify the RNC file - the RNG version is auto-derived from it:
# one way to auto-derive workflow.rng from this file is:
#   java -jar trang.jar -I rnc -O rng workflow.rnc workflow.rng
# 
# $Id$

grammar {
    start = WORKFLOW
    
    WORKFLOW = element workflow {
        attribute title { text },
        attribute description { text },
        attribute tags { SSV_symbol }?,  # declare any (system-defined) tags used in workflow
        attribute note { text }?,
        attribute permission_actions { SSV }?,  # type-relative permission actions
        # i.e. each included action allowed to be in the form [type_key].{Action}, 
        # with the optional type_key defaulting to the type_key of the type 
        # "owning" this workflow.
        
        ALLOW*,
        FEATURE*,
        FACET*,
        STATE+,
        TRANSITION+
    }
    
    ALLOW = element allow {
        attribute permission { text }, 
        attribute roles { SSV }?
    }
    
    FEATURE = element feature {
        attribute name { SYMBOL_NAME },
        attribute enabled { xsd:boolean },
        
        element parameter { # !+ name by feature
            attribute name { SYMBOL_NAME }, 
            attribute value { text }
        }*,
        FACET*
    }
    
    FACET = element facet {
        attribute name { SYMBOL_NAME },
        attribute default { xsd:boolean }?,  # default:false, may be true only once
        ALLOW*
    }
    
    STATE = element state {
        attribute id { SYMBOL_NAME },
        attribute title { text },
        attribute version { xsd:boolean }?,  # default:false
        attribute tags { SSV_symbol }?,
        attribute note { text }?,
        attribute obsolete { xsd:boolean }?,  # default:false
        
        ( # if (permissions_from state | permissions_from_parent) -> then NO facets
            ( # may have EITHER permissions_from_state OR permissions_from_parent
                attribute permissions_from_state { SYMBOL_NAME }  # state.id
                    | attribute permissions_from_parent { xsd:boolean }  # default:false
            )?
            | element facet {
                attribute ref { token }  # [ {feature.@name} ].{facet.@name}
            }*
        )
    }
    
    TRANSITION = element transition {
        attribute title { text },
        attribute source { SSV_symbol | empty }, # space separated list of state ids
        attribute destination { SYMBOL_NAME },  # state.id
        attribute grouping_unique_sources { token }?,  # a transition grouping id
        attribute condition { token }?,  # callable
        attribute trigger { "automatic" | "system" | "manual" },
        attribute roles { SSV }?,
        attribute order { xsd:integer }?,  # default:0
        attribute require_confirmation { xsd:boolean }?,  # default:false
        attribute note { text }?
    }
    
    
    # a space-separated string value !+pattern for un/qualified permission_actions, roles
    SSV = list { token+ }
    
    # a space-separated VALID SYMBOLs value
    SSV_symbol = list { SYMBOL_NAME+ }
    
    # a valid symbol name e.g. in python - "^[\w\d_]+$"
    # only letters, numbers and "_" char i.e. no whitespace or "-" or "." etc.
    SYMBOL_NAME = xsd:string { pattern="[\w\d_]+" }

}

