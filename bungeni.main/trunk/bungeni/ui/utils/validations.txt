Setup
-----
Setting up Database Connection and Utilities:

   >>> from bungeni.models import domain
   >>> import datetime
   >>> import bungeni.models.testing
   >>> db = bungeni.models.testing.setup_db()
   >>> from bungeni.alchemist import Session
   >>> session = Session()
   >>> from bungeni.ui.forms.test_dates import today, yesterday, tomorrow, dayat
   >>> from bungeni.ui.queries import utils
   >>> class MockContainer(object):
   ...  __parent__ = None
   >>> from bungeni.ui.forms import validations
   
   
Note that we only test the overlap of 'peers' here.
refer to test_dates.py to test  that contained objects are inside
their parents dates
   
Chambers
-----------
low level validations:
   
   >>> chamber = domain.Chamber(short_name=u"p_1", start_date=today, end_date=tomorrow)
   >>> session.add(chamber)
   >>> session.flush()
   >>> list(utils.validate_date_in_interval(None, domain.Chamber, yesterday))
   []
   >>> list(utils.validate_date_in_interval(None, domain.Chamber, today))
   [<bungeni.models.domain.Chamber object at ...>]

   >>> list(utils.validate_date_in_interval(None, domain.Chamber, tomorrow))
   [<bungeni.models.domain.Chamber object at ...>]

   >>> list(utils.validate_date_in_interval(chamber, domain.Chamber, today))
   []
   >>> list(utils.validate_date_in_interval(chamber, domain.Chamber, tomorrow))
   []
   >>> list(utils.validate_date_in_interval(None, domain.Chamber, dayat))
   []
   
Before you can add a new chamber others must be closed
   
   >>> list(utils.validate_open_interval(None, domain.Chamber))
   []
   
        
Add a new (open ended) chamber
   >>> chamber2 = domain.Chamber(short_name=u"p_2", start_date=tomorrow, end_date=None)
   >>> session.add(chamber2)
   >>> session.flush()
   
   >>> list(utils.validate_open_interval(None, domain.Chamber))
   [<bungeni.models.domain.Chamber object at ...>]
 
give the 2nd chamber an end date and save
   >>> chamber2.end_date = dayat
   >>> session.flush() 
   
No open chambers  anymore 
   >>> list(utils.validate_open_interval(None, domain.Chamber))
   []
      
Now check for overlapping dates but not for the current (edited) chamber
   
   >>> list(utils.validate_date_in_interval(chamber2, domain.Chamber, today))
   [<bungeni.models.domain.Chamber object at ...>]
   
   >>> list(utils.validate_date_in_interval(chamber2 , domain.Chamber, dayat))
   []
   >>> list(utils.validate_date_in_interval(chamber, domain.Chamber, dayat))
   [<bungeni.models.domain.Chamber object at ...>]
   
   >>> list(utils.validate_date_in_interval(chamber, domain.Chamber, yesterday)) 
   []
   >>> list(utils.validate_date_in_interval(chamber, domain.Chamber, today))
   []
   
give the 2nd chamber an end date and save
   >>> chamber2.end_date = dayat
   >>> session.flush() 
   
No open chambers  anymore 
   >>> list(utils.validate_open_interval(None, domain.Chamber)) 
   []

High level validations: !+review

   >>> chamber_container = MockContainer()
   >>> form_data= {'start_date': today, 'end_date': tomorrow}
   >>> validations.validate_chamber_dates(action=None, data=form_data, 
   ...  context=chamber, container=chamber_container)
   []
   
   >>> validations.validate_chamber_dates(action=None, data=form_data, 
   ...  context=chamber2, container=chamber_container)
   [Invalid(u'The start date overlaps with (p_1)', 'start_date'), 
   Invalid(u'The end date overlaps with (p_1)', 'end_date')]
   
   >>> chamber.end_date = None
   >>> session.flush() 
   >>> validations.validate_chamber_dates(action=None, data=form_data, 
   ...  context=chamber2, container=chamber_container)
   [Invalid(u'Another chamber is not yet dissolved (p_1)', 'election_date')]

Government:
------------

  >>> government = domain.Government()
  >>> government.start_date = today
  >>> government_container = MockContainer()
  >>> government_container.__parent__ = chamber
  >>> validations.validate_government_dates(action=None, data=form_data,
  ...   context=government, container=government_container)
  []
  
  >>> government.parliament_id = chamber.group_id #!+?
  >>> government.short_name = u"gov1"
  >>> session.add(government)
  >>> session.flush()
  >>> government.end_date
  
  >>> government_container.__parent__ = chamber2
  >>> validations.validate_government_dates(action=None, data=form_data,
  ...   context=government, container=government_container)
  [Invalid(u'Start date must start after the swearing in of the chamber (...)', 'start_date')]
  
  >>> government2 = domain.Government()
  >>> list(utils.validate_open_interval(government2, domain.Government))
  [<bungeni.models.domain.Government object at ...>]
  
  >>> validations.validate_government_dates(action=None, data=form_data,
  ...   context=government2, container=government_container)
  [Invalid(u'Start date must start after the swearing in of the chamber (...)', 'start_date'), 
  Invalid(u'Another Government is not yet dissolved (gov1)', 'start_date')]
  
  >>> government_container.__parent__ = chamber
  >>> chamber.end_date = tomorrow
  >>> session.flush()
  >>> form_data['start_date'] = dayat
  >>> validations.validate_government_dates(action=None, data=form_data,
  ...   context=government, container=government_container)
   [Invalid(u'Start date cannot be after the chambers dissolution (...)', 'start_date')]
  
  >>> government.end_date = tomorrow
  >>> session.flush()
  >>> form_data['start_date'] = today
  >>> validations.validate_government_dates(action=None, data=form_data,
  ...   context=government2, container=government_container)
  [Invalid(u'The start date overlaps with (gov1)', 'start_date'), 
  Invalid(u'The end date overlaps with (gov1)', 'end_date')]
  
User group memberships:
----------------------
  >>> country = domain.Country()
  >>> country.country_id = 'KE'
  >>> country.country_name = u"Kenya"
  >>> session.add(country)
  >>> session.flush()
  >>> mp_1 = domain.User(u"mp_1", 
  ...        first_name=u"a", 
  ...        last_name=u'ab', 
  ...        birth_country="KE",
  ...        email=u"mp1@example.com", 
  ...        date_of_birth=datetime.datetime.now(),
  ...        gender='M')
  >>> mp_2 = domain.User(u"mp_2", 
  ...        first_name=u"b", 
  ...        last_name=u"bc", 
  ...        birth_country="KE",
  ...        date_of_birth=datetime.datetime.now(),
  ...        email=u"mp2@example.com",
  ...        gender='M')
  >>> mp_3 = domain.User(u"mp_3",
  ...        first_name=u"c", 
  ...        birth_country="KE",
  ...        last_name=u"cd",
  ...        date_of_birth=datetime.datetime.now(),
  ...        email=u"mp3@example.com", 
  ...        gender='F')
  >>> session.add(mp_1)
  >>> session.add(mp_2)
  >>> session.add(mp_3)
  >>> membership = domain.GroupMember()
  >>> membership.user = mp_1
  >>> membership.group = chamber
  >>> session.add(membership)
  >>> session.flush()
  >>> group_container = MockContainer()
  >>> group_container.__parent__ = chamber

  

  >>> form_data = {"start_date": today,
  ...   "end_date": None,
  ...   "user_id": mp_1.user_id}
  
  >>> validations.validate_group_member_dates(None, form_data, membership, group_container)
  []
  >>> validations.validate_group_member_dates(None, form_data, None, group_container)
  [Invalid(u'The person is a member in (p_1) at that date', 'end_date')]
  
  >>> form_data = {"start_date": yesterday,
  ...   "end_date": today,
  ...   "user_id": mp_1.user_id} 

  >>> validations.validate_group_member_dates(None, form_data, membership, group_container)
  []
  >>> validations.validate_group_member_dates(None, form_data, None, group_container)
  [Invalid(u'The person is a member in (p_1) at that date', 'end_date')]
 
  >>> membership.end_date = tomorrow
  >>> session.flush()
 
  >>> form_data = {"start_date": yesterday,
  ...   "end_date": yesterday,
  ...   "user_id": mp_1.user_id} 
  >>> validations.validate_group_member_dates(None, form_data, None, group_container)
  []

  >>> form_data = {"start_date": yesterday,
  ...   "end_date": tomorrow,
  ...   "user_id": mp_1.user_id} 
  >>> validations.validate_group_member_dates(None, form_data, None, group_container)
  [Invalid(u'The person is a member in (p_1) at that date', 'end_date')]
    
  >>> form_data = {"start_date": tomorrow,
  ...   "end_date": tomorrow,
  ...   "user_id": mp_1.user_id} 
  >>> validations.validate_group_member_dates(None, form_data, None, group_container)
  [Invalid(u'The person is a member in (p_1) at that date', 'start_date'), 
  Invalid(u'The person is a member in (p_1) at that date', 'end_date')]
  >>> validations.validate_group_member_dates(None, form_data, membership, group_container)
  []


Political Group Memberships are different from general group memberships as you 
may be only member of one political group at any given time:

  >>> pgroup_red = domain.PoliticalGroup()
  >>> pgroup_red.short_name = u"Red"
  >>> pgroup_red.start_date = today
  >>> session.save(pgroup_red)
  >>> session.flush()
  >>> pgroup_blue = domain.PoliticalGroup()
  >>> pgroup_blue.short_name = u"Blue"
  >>> pgroup_blue.start_date = today
  >>> session.save(pgroup_blue)
  >>> session.flush()

  >>> pgroup_member1 = domain.GroupMember()
  >>> pgroup_member1.user = mp_1
  >>> pgroup_member1.group = pgroup_red
  >>> session.add(pgroup_member1)
  >>> session.flush()

  >>> pgroup_member2 = domain.GroupMember()
  >>> pgroup_member2.user = mp_1
  >>> pgroup_member2.group = pgroup_blue

  >>> pgroup_member_container = MockContainer()
  >>> pgroup_member_container.__parent__ = pgroup_red
  >>> validations.validate_political_group_member(action=None, data=form_data, 
  ...   context=pgroup_member2, container=pgroup_member_container)
  [Invalid(u'The person is a member in (Red) at that date', 'end_date')]
  
  >>> pgroup_member1.start_date = yesterday
  >>> pgroup_member1.end_date = today
  >>> session.flush()
  >>> validations.validate_political_group_member(action=None, data=form_data, 
  ...   context=pgroup_member2, container=pgroup_member_container)
  []
  
  >>> session.add(pgroup_member2)
  >>> session.flush()
  >>> validations.validate_political_group_member(action=None, data=form_data, 
  ...   context=pgroup_member2, container=pgroup_member_container)
   [Invalid(u'The person is a member in (Blue) at that date', 'end_date')]

  >>> pgroup_member3 = domain.GroupMember()
  >>> pgroup_member3.user = mp_3
  >>> pgroup_member3.group = pgroup_red
  >>> form_data['user_id'] = mp_3.user_id
  >>> validations.validate_political_group_member(action=None, data=form_data, 
  ...   context=pgroup_member3, container=pgroup_member_container)
  []
  

Titles for group members:
  >>> user_role_type_chair = domain.MemberTitle()
  >>> user_role_type_chair.user_unique = True
  >>> user_role_type_chair.user_type = 'user'
  >>> user_role_type_chair.user_role_name= u'Chair'
  >>> user_role_type_chair.sort_order = 0
  >>> session.add(user_role_type_chair)
  >>> session.flush()
  >>> user_role_type_member = domain.MemberTitle()
  >>> user_role_type_member.user_unique = False
  >>> user_role_type_member.user_type = 'user'
  >>> user_role_type_member.user_role_name = u'Member'
  >>> user_role_type_member.sort_order = 0
  >>> session.add(user_role_type_member)
  >>> session.flush()
  
We reuse the political group memberships to test the titles:

  >>> member_role_container = MockContainer()
  >>> member_role_container.__parent__ = pgroup_member1
  >>> member_role1 = domain.MemberTitle()
  >>> member_role1.start_date = today
  >>> member_role1.title_name_id = user_role_type_chair.user_role_type_id
  >>> member_role1.member_id = pgroup_member1.member_id
  
check that the user does not have the role chaiperson yet
  
  >>> form_data['title_name_id'] = user_role_type_chair.user_role_type_id
  >>> validations.validate_member_titles(action=None, data=form_data, 
  ...   context=member_role1, container=member_role_container)
  []
  >>> session.add(member_role1)
  >>> session.flush()
  
this role can be edited:
  >>> validations.validate_member_titles(action=None, data=form_data, 
  ...   context=member_role1, container=member_role_container)
  []

end his term as a chairperson
  >>> member_role1.start_date = yesterday
  >>> member_role1.end_date = today
  >>> session.flush()

and try to give him the role again:
  >>> member_role2 = domain.MemberTitle()
  >>> member_role2.start_date = tomorrow
  >>> member_role2.end_date = dayat
  >>> member_role2.title_name_id = user_role_type_chair.user_role_type_id
  >>> member_role2.member_id = pgroup_member1.member_id
  >>> form_data['start_date'] = tomorrow
  >>> form_data['end_date'] = dayat
  >>> validations.validate_member_titles(action=None, data=form_data, 
  ...   context=None, container=member_role_container)
  []
  >>> session.add(member_role2)
  >>> session.flush()
    
now we give him the additional role 'member':
  >>> member_role2 = domain.MemberTitle()
  >>> member_role2.start_date = yesterday
  >>> member_role2.end_date = dayat
  >>> member_role2.title_name_id = user_role_type_member.user_role_type_id
  >>> member_role2.member_id = pgroup_member1.member_id
  >>> form_data['start_date'] = yesterday
  >>> form_data['end_date'] = dayat
  >>> form_data['title_name_id'] = user_role_type_member.user_role_type_id
  >>> validations.validate_member_titles(action=None, data=form_data, 
  ...   context=None, container=member_role_container)
  []
  >>> session.save(member_role2)
  >>> session.flush()
  >>> validations.validate_member_titles(action=None, data=form_data, 
  ...   context=member_role2, container=member_role_container)
  []
  
he may be chairman in another group:
  >>> member_role_container.__parent__ = pgroup_member2
  >>> member_role3 = domain.MemberTitle()
  >>> member_role3.start_date = yesterday
  >>> member_role3.end_date = dayat
  >>> member_role3.title_name_id = user_role_type_chair.user_role_type_id
  >>> member_role3.member_id = pgroup_member2.member_id
  >>> form_data['start_date'] = yesterday
  >>> form_data['end_date'] = dayat
  >>> form_data['title_name_id'] = user_role_type_chair.user_role_type_id
  >>> validations.validate_member_titles(action=None, data=form_data, 
  ...   context=None, container=member_role_container)
  []
  >>> session.add(member_role3)
  >>> session.flush()

  
try to give a second user the chairman role
  
  >>> member_role_container.__parent__ = pgroup_member3
  >>> member_role3 = domain.MemberTitle()
  >>> member_role3.start_date = yesterday
  >>> member_role3.title_name_id = user_role_type_chair.user_role_type_id
  >>> member_role3.member_id = pgroup_member3.member_id
  >>> form_data['title_name_id'] = user_role_type_chair.user_role_type_id
  >>> validations.validate_member_titles(action=None, data=form_data, 
  ...   context=None, container=member_role_container)
  [Invalid(u'A person with the title Chair already exists', 'start_date'), 
  Invalid(u'A person with the title Chair already exists', 'end_date')]

as this is not possible just give him the member role:
  >>> member_role3.title_name_id = user_role_type_member.user_role_type_id
  >>> member_role3.member_id = pgroup_member2.member_id
  >>> form_data['title_name_id'] = user_role_type_member.user_role_type_id
  >>> validations.validate_member_titles(action=None, data=form_data, 
  ...   context=None, container=member_role_container)
  []
  >>> session.add(member_role3)
  >>> session.flush()
  
is it possible to edit this role:
  >>> validations.validate_member_titles(action=None, data=form_data, 
  ...   context=member_role3, container=member_role_container)
  [] 

it is not possible to give him the role a second time
  >>> validations.validate_member_titles(action=None, data=form_data, 
  ...   context=None, container=member_role_container)
  [Invalid(u'This persons already has the title Member', 'start_date'), 
  Invalid(u'This persons already has the title Member', 'end_date')]

  
Clean up commit outstanding transactions
-----------------------------------------
 >>> session.flush() 
 >>> session.commit()
 >>> session.close()
 

   
