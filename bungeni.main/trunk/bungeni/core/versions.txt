Versions
========

  >>> import bungeni.core.version
  >>> import datetime

Setting up database connection and utilities:

    >>> from bungeni.core.testing import setup_db
    >>> engine = setup_db()

Adding a question.

  >>> from bungeni.models.testing import add_content
  >>> from bungeni.models import domain
  >>> from bungeni.alchemist import Session
  >>> session = Session()

  >>> country = domain.Country()
  >>> country.country_id = "KE"
  >>> country.country_name = u"Kenya"
  >>> country.iso_name = u"KENYA"
  >>> country.language = "en"
  >>> session.add(country)
  >>> session.flush() 

  >>> mp_1 = domain.User(u"mp_1", 
  ...        first_name=u"a", 
  ...        last_name=u"ab", 
  ...        birth_country="KE",
  ...        email=u"mp1@example.com", 
  ...        date_of_birth=datetime.datetime.now(),
  ...        language="en",
  ...        gender="M") 
  >>> session.add(mp_1)
  >>> session.flush()


  >>> question = add_content(
  ...     domain.Question,
  ...     short_title="A question",
  ...     type="question",
  ...     owner_id=mp_1.user_id,
  ...     language="en")


In order to create a participation, we need a principal:

  >>> from bungeni.core.testing import set_interaction
  >>> set_interaction(None)

  >>> from bungeni.core.testing import create_principal
  >>> member = create_principal("mp_1", "Member", ())

  >>> set_interaction(member)
  >>> from bungeni.models.utils import get_principal_id
  >>> get_principal_id()
  'mp_1'


Verify that no versions exist yet (assuming questions are IVersionable):

    >>> len(question.versions)
    0

To be versioned, a question should be in a valid state:

!+INTERACTION(mr, jul-2011) remaining tests need to be upgraded to take into 
account richer testing possibilities given the above newly added principal 
interaction

    >>> from bungeni.core.workflow.interfaces import IWorkflowController
    >>> wfc = IWorkflowController(question)
    >>> wfc
    <bungeni.core.workflow.states.WorkflowController object at ...>
    >>> wfc.fireAutomatic()
    >>> question.status
    'draft'

After creating a version, verify availability:

    >>> bungeni.core.version.DOCUMENT_create_version(question)
    >>> session.refresh(question) # !+ otherwise question.versions is stale
    >>> len(question.versions)
    1

Cleanup
-------
  
  >>> session.flush()
  >>> session.commit()
  >>> session.close()
  >>> set_interaction(None)

