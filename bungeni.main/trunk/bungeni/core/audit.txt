Audit
----------------
The test below creates a bill and checks that changes to it are audit
logged properly
TODO:expand to test all bungeni content types

Setup a participation
---------------------

  >>> from bungeni.core.testing import create_participation
  >>> import zope.security.management
  >>> zope.security.management.endInteraction()

Database imports
----------------
  
  >>> from bungeni.models import domain
  >>> import datetime
  >>> import bungeni.models.testing
  >>> db = bungeni.models.testing.setup_db()
  >>> from bungeni.alchemist import Session
  >>> session = Session()
  
    >>> from bungeni.core import audit
    >>> audit = reload(audit)

Initialise User
---------------
   >>> user = domain.User(
   ...        login=u"jdoe", 
   ...        first_name=u"a", 
   ...        last_name=u'ab', 
   ...        email=u"mp1@example.com", 
   ...        date_of_birth=datetime.datetime.now(),
   ...        language="en",
   ...        gender='M')
   >>> session.add(user)
   >>> session.flush()

Initialise Group
----------------

  >>> parliament = domain.Parliament(short_name=u"p_1",
  ...                               start_date=datetime.datetime.now(), 
  ...                               election_date=datetime.datetime.now())
  >>> parliament.language = "en"
  >>> session.add( parliament )
  >>> session.flush()
  >>> len(list(session.query(domain.BillChange)))
  0

Initialise Bill
-------------------
   >>> bill_type = domain.BillType()
   >>> bill_type.bill_type_name = u"test"
   >>> bill_type.language = u"en"
   >>> session.add(bill_type)
   >>> session.flush()
   >>> bill = domain.Bill()
   >>> bill.body_text = 'THIS IS A TEST'
   >>> bill.start_date = datetime.datetime.now()
   >>> bill.end_date = datetime.datetime.now()
   >>> bill.note = "This is a test"
   >>> bill.short_name = "Sitting Agenda"
   >>> bill.owner = user
   >>> bill.language = "en"
   >>> bill.created_date = datetime.datetime.now()
   >>> bill.group = parliament
   >>> bill.bill_type_id = bill_type.bill_type_id
   >>> session.add(bill)
   >>> session.flush()

Create a participation with the user we just created as the principal
--------------------------------------
  
  >>> principal = zope.security.testing.Principal('jdoe', 'manager', ())
  >>> zope.security.management.newInteraction(create_participation(principal))
  >>> principal.id
  'jdoe'

Broadcast an object created event
---------------------------------
  >>> event = zope.lifecycleevent.ObjectCreatedEvent(bill)
  >>> zope.component.event.objectEventNotify(event)
  
check the audit table for changes: 
!+AUDIT(murithi, may-2011) - With workflow events firing => more changes
TODO: cater for workflow related changes in changes table

check audit table for "added" change
  >>> len(list(session.query(domain.BillChange).filter(
  ...   domain.BillChange.action=="added")))
  1

  >>> changes_table_count = len(list(session.query(domain.BillChange)))

Select last modification
------------------------
  >>> bill.changes[0].user.login
  u'jdoe'

Broadcase an object modified event
----------------------------------
  >>> event = zope.lifecycleevent.ObjectModifiedEvent(bill)
  >>> zope.component.event.objectEventNotify(event)

check the audit table: 

  >>> len(list(session.query(domain.BillChange))) == changes_table_count + 1 
  True

Select last modification
------------------------
  >>> bill.changes[1].user.login
  u'jdoe'

Clean up
--------
  >>> session.flush()
  >>> session.commit()
  >>> session.close()
  >>> zope.security.management.endInteraction()

