Question and response workflow
==============================

Setup
-----

Setting up database connection and utilities:

  >>> from bungeni.core.testing import setup_db
  >>> engine = setup_db()
  
  >>> from bungeni.core.workflows.testing import setup_adapters
  >>> from bungeni.core.workflows.testing import setup_security_adapters
  >>> setup_adapters()
  >>> setup_security_adapters()
  
  >>> from ore.alchemist import Session
  >>> session = Session()
  
Imports.

  >>> from bungeni.models import domain
  >>> from bungeni.models import schema

Questions are versionable.
  
  >>> from zope.interface import classImplements
  >>> from bungeni.core.interfaces import IVersionable
  >>> classImplements(domain.Question, IVersionable)

Principals
----------

In order to create a participation, we need a principal:

  >>> from bungeni.core.testing import create_principal, create_participation
  >>> import zope.security.management
  >>> zope.security.management.endInteraction()

  >>> member = create_principal("member", "Member", ())
  >>> clerk = create_principal("clerk", "Clerk", ())
  >>> speaker = create_principal("speaker", "Speaker", ())
  >>> minister = create_principal("minister", "Minister", ())

Assign roles.

  >>> global_prm = zope.securitypolicy.interfaces.IPrincipalRoleMap(app)
  >>> global_prm.assignRoleToPrincipal( u'bungeni.MP', 'member')
  >>> global_prm.assignRoleToPrincipal( u'bungeni.Clerk', 'clerk')
  >>> global_prm.assignRoleToPrincipal( u'bungeni.Speaker', 'speaker')
  >>> global_prm.assignRoleToPrincipal( u'bungeni.Minister', 'minister')


Content creation
----------------

  >>> from bungeni.models.testing import add_content

  >>> parliament = add_content(
  ...    domain.Parliament,
  ...    short_name=u"p_1",
  ...    language="en",
  ...    start_date=yesterday,
  ...    election_date=yesterday)

  >>> gov = add_content(
  ...    domain.Government,
  ...    short_name=u"gov_1",
  ...    language="en",
  ...    start_date=yesterday,
  ...    parliament_id=parliament.parliament_id)
  
  >>> ministry = add_content(
  ...    domain.Ministry,
  ...    short_name=u"ministry",
  ...    language="en",
  ...    start_date=yesterday,
  ...    parent_group_id=gov.group_id)
 

We need a parliament, government ministry and ministers to whom we can
send the question notifications.

  >>> country = add_content(
  ...    domain.Country,
  ...    country_id='KE',
  ...    iso_name = u"KENYA",
  ...    language="en",
  ...    country_name=u"Kenya")

  >>> mp_1 = add_content(
  ...        domain.User,
  ...        u"minister 1",
  ...        first_name=u"a", 
  ...        last_name=u'ab', 
  ...        birth_country="KE",
  ...        email=u"mp1@example.com", 
  ...        date_of_birth=today,
  ...        language="en",
  ...        gender='M')
  
  >>> mp_2 = add_content(
  ...        domain.User,
  ...        u"minister 2",
  ...        first_name=u"b", 
  ...        last_name=u"bc", 
  ...        birth_country="KE",
  ...        date_of_birth=today,
  ...        email=u"mp2@example.com",
  ...        language="en",
  ...        gender='M')
  
  >>> mp_3 = add_content(
  ...        domain.User,
  ...        u"No minister",
  ...        first_name=u"c", 
  ...        birth_country="KE",
  ...        last_name=u"cd",
  ...        date_of_birth=today,
  ...        email=u"mp3@example.com", 
  ...        language="en",
  ...        gender='F')

  >>> question = add_content(
  ...     domain.Question,
  ...     short_name=u"My subject",
  ...     body_text=u"The question",
  ...     owner_id = mp_1.user_id,
  ...     language="en")
  >>> question.__parent__ = app

  >>> from bungeni.models.testing import create_sitting
  >>> sitting = create_sitting(parliament.parliament_id, "en")

Set up a security mapping.

  >>> from zope.securitypolicy.interfaces import IPrincipalRoleMap
  >>> prm = zope.securitypolicy.interfaces.IPrincipalRoleMap(question)

  >>> #from zope.securitypolicy.interfaces import IRolePermissionMap  
  >>> from alchemist.security.permission import LocalRolePermissionMap
  >>> rpm = LocalRolePermissionMap(question)
  
Integrity
---------

Verify that all states are reachable.

  >>> from bungeni.core.workflows.testing import verify_workflow
  >>> from ore.workflow.interfaces import IWorkflow

  >>> wf = IWorkflow(question)
  >>> verify_workflow(wf)

Questions transitions 
-------------------------------------

  >>> from ore.workflow.interfaces import IWorkflowInfo
  >>> from bungeni.core.workflows.question import actions 
  >>> info = IWorkflowInfo(question)
  >>> info
  <ore.workflow.workflow.WorkflowInfo object at ...>
  
XXX-1 The IWorkflowInfo interface triggers the incorrect adapter... we want 
the factory class bungeni.core.workflows.states.StateWorkflowInfo to be used, 
but all attempts to configure this for within this testing context
[in: core/ftesting.zcml, core.workflows.testing.setup_adapters()] 
are so far unsuccessful. So, instead, we explictly adapt the question:

  >>> from bungeni.core.workflows.states import StateWorkflowInfo
  >>> info = StateWorkflowInfo(question)
  >>> info
  <bungeni.core.workflows.states.StateWorkflowInfo object at ...>

PRINCIPAL: member

  >>> zope.security.management.newInteraction(create_participation(member))
  >>> from bungeni.models.utils import get_principal_id
  >>> get_principal_id()
  'member'

-------------------------------------
"create" - assigns the role of "Owner" and sets the parliament id.

  >>> actions.create(info, question)

# XXX-2 failing:  
#  >>> info.fireTransition("create")
#  >>> question.status
#  'draft'

  >>> question.parliament_id==parliament.parliament_id
  True
  
  >>> tuple(prm.getRolesForPrincipal("member"))
  ((u'bungeni.Owner', PermissionSetting: Allow),)
  >>> tuple(prm.getRolesForPrincipal("clerk"))
  ()


PERMISSIONS for member principal for "draft" question.status

# XXX-3 failing:
#  >>> from zope.security import checkPermission
#  >>> [ checkPermission("bungeni.question.Edit", question), 
#  ...   checkPermission("zope.View", question), 
#  ...   checkPermission("bungeni.question.Delete", question), 
#  ...   checkPermission("bungeni.fileattachment.Add", question), 
#  ...   checkPermission("bungeni.fileattachment.Edit", question) ]
#  [True, True, True, True, True]

Should also check permissions for other roles, i.e.
    <deny permission="bungeni.question.Add" role="bungeni.MP" />
    <deny permission="zope.View" role="bungeni.MP" />
    <deny permission="zope.View" role="bungeni.Clerk" />
    <deny permission="zope.View" role="bungeni.Speaker" />
    <deny permission="zope.View" role="bungeni.Minister" />
    <deny permission="zope.View" role="bungeni.Everybody" /> 
    <deny permission="zope.View" role="bungeni.Anybody" />
this would require to run with an interaction, one with a participation that 
consists of a principal with the specific role.


-------------------------------------
"submit-to-clerk"

  >>> actions.submit_to_clerk(info, question)

# XXX-4 failing:
#  >>> info.fireTransition("submit-to-clerk")
#  >>> question.status
#  'submitted'
  >>> from bungeni.core.interfaces import IVersioned
  >>> versions = IVersioned(question)
  >>> len(versions)
  1
  
  >>> tuple(prm.getRolesForPrincipal("member"))
  ((u'bungeni.Owner', PermissionSetting: Allow),)

  >>> #tuple(prm.getRolesForPrincipal("clerk"))
  >>> #tuple(rpm.getRolesAndPermissions())
  >>> #tuple(rpm.getPermissionsForRole(u'bungeni.Owner'))
  >>> #tuple(rpm.getRolesForPermission(u'bungeni.question.Edit'))

PRINCIPAL: clerk

Switch to the clerk, and check permission for Clerk on the question 
in "submitted" state:

  >>> zope.security.management.endInteraction()
  >>> zope.security.management.newInteraction(create_participation(clerk))
  >>> get_principal_id()
  'clerk'

-------------------------------------
"received-by-clerk"

  >>> actions.received_by_clerk(info, question)

# XXX-5 failing:
trying to execute the *transition* --as the clerk or as the member-- gives:
Failed example:
    info.fireTransition("received-by-clerk")
Exception raised:
      File "/home/undesa/bungeni/cap_installs/bungeni_install/bungeni/releases/20100305100101/eggs/ore.workflow-1.0.4-py2.5.egg/ore/workflow/workflow.py", line 97, in getTransition
        transition = self._id_transitions[transition_id]
    KeyError: 'received-by-clerk'
#  >>> info.fireTransition("received-by-clerk")
#  >>> question.status
#  'received'
  >>> len(versions)
  2
  


"Require edit by MP"

  >>> actions.mp_clarify(info, question)
  >>> #info.fireTransition("mp-clarify")
  >>> #question.status
  #'clarify_mp'
  >>> len(versions)
  3

"Complete".

  >>> actions.complete(info, question)
  >>> #info.fireTransition("complete")
  >>> #question.status
  #'complete'
  >>> len(versions)
  5

"Approve".

  >>> actions.approve(info, question)
  >>> len(versions)
  6

  >>> question.approval_date == today
  True

"Reject".

  >>> actions.reject(info, question)

"Require amendment".

  >>> actions.require_amendment(info, question)
  >>> len(versions)
  7

"Complete clarify".

  >>> actions.complete_clarify(info, question)
  >>> len(versions)
  8

"MP clarify".

  >>> actions.mp_clarify(info, question)
  >>> len(versions)
  9

"Send to ministry".

  >>> actions.send_to_ministry(info, question)
  >>> question.ministry_submit_date == today
  True

"Answer".

  >>> actions.answer(info, question)

Question conditions
-------------------

  >>> from bungeni.core.workflows.question import conditions
  
"Is scheduled".

  >>> conditions.is_scheduled(info, question)
  False

  >>> from bungeni.models.testing import create_sitting
  >>> sitting = create_sitting(parliament.parliament_id)

  >>> scheduling = add_content(
  ...     domain.ItemSchedule,
  ...     sitting_id=sitting.sitting_id,
  ...     item_id=question.parliamentary_item_id)
  
  >>> conditions.is_scheduled(info, question)
  True

"Is ministry set".

  >>> conditions.is_ministry_set(info, question)
  False

  >>> question.ministry_id = ministry.group_id
  >>> conditions.is_ministry_set(info, question)
  True

Notifications
-------------

  >>> from bungeni.core.workflows import question as notification
  >>> from zope.component.interfaces import ObjectEvent

Setup mock delivery component.

  >>> import zope.sendmail.interfaces
  
  >>> class MockMailDelivery(object):
  ...     interface.implements(zope.sendmail.interfaces.IMailDelivery)
  ...
  ...     def send(self, *args):
  ...         print "From: %s\nTo: %s\n\n%s" % args

  >>> component.provideUtility(MockMailDelivery())

Set up a user.

  >>> user = add_content(
  ...     domain.User,
  ...     first_name=u'John',
  ...     last_name=u'Doe',
  ...     language="en",
  ...     email = 'john.doe@localhost')

  >>> minister = add_content(
  ...     domain.Minister,
  ...     language="en",
  ...     group_id=ministry.group_id,
  ...     user_id=mp_1.user_id)

  >>> minister2 = add_content(
  ...     domain.Minister,
  ...     language="en",
  ...     group_id=ministry.group_id,
  ...     user_id=mp_2.user_id)

  >>> question.receive_notification = False
  >>> question.owner_id = user.user_id
  
Question received.
  
  >>> notification.SendNotificationToMemberUponReceipt(ObjectEvent(question))

Let's change our setting for receive notification so an email message
is dispatched.

  >>> question.receive_notification = True
  >>> notification.SendNotificationToMemberUponReceipt(ObjectEvent(question))
  From: clerks.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> 
  ...
  Subject: Question received: My subject
  ...
  
Send notification to Clerk's office upon submit.

  >>> notification.SendNotificationToClerkUponSubmit(ObjectEvent(question))
  From: "John Doe" <john.doe@localhost>
  To: clerks.office@parliament.go.tld ...
  Subject: Question submitted: My subject ...

the question is marked as “complete” and is made available / forwarded
to the Speaker's Office for reviewing and to make it “admissible”.

  >>> notification.SendNotificationToMemberUponComplete(ObjectEvent(question))
  From: clerks.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> 
  ...
  Question completed for review at the speakers office...

At the same time the question is also forwarded to the ministry.

  >>> question.ministry_id = ministry.group_id
  >>> notification.SendNotificationToMinistryUponComplete(ObjectEvent(question))
  From: clerks.office@parliament.go.tld
  To: "a ab" <mp1@example.com> ,"b bc" <mp2@example.com> 
  ...
  Question assigned to ministry...
  
A question was rejected by the speakers office.

  >>> notification.SendNotificationToMemberUponReject(ObjectEvent(question))
  From: speakers.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> ...
  Subject: Question rejected: My subject ... 

A question needs clarification by the MP

  >>> notification.SendNotificationToMemberUponNeedsClarification(ObjectEvent(question))
  From: clerks.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> ...
  Subject: Question needs clarification: My subject ...

A question was deferred by Clerk's office.

  >>> notification.SendNotificationToMemberUponDeferred(ObjectEvent(question))
  From: speakers.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> ...
  Subject: Question deferred: My subject ...

A question was scheduled by Speakers office.

  >>> notification.SendNotificationToMemberUponSchedule(ObjectEvent(question))
  From: clerks.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> ...
  Subject: Question scheduled: My subject ...

A question was sent to a ministry for written response.

  >>> notification.SendNotificationToMemberUponSentToMinistry(ObjectEvent(question))
  From: clerks.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> ...
  Subject: Question sent to ministry: My subject ...

A questions answer was reviewed by Clerk's office.

  >>> notification.SendNotificationToMemberUponAnswer(ObjectEvent(question))
  From: clerks.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> ...
  Subject: Question answered: My subject ...


  
Cleanup
-------

  >>> session.flush()
  >>> session.commit()
  >>> session.close()
  >>> zope.security.management.endInteraction()
