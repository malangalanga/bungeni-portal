Setup
-----

    >>> from bungeni.alchemist import Session
    >>> import copy, datetime

    some setup for tests
    >>> import bungeni.models.testing
    >>> db = bungeni.models.testing.setup_db()
    >>> session=Session()
    >>> from bungeni.models import domain


setup a sitting
Sittings
--------

any group can schedule a sitting, a sitting is treated as a physical
meeting of the group by the system. 

    >>> st = domain.GroupSittingType()
    >>> st.group_sitting_type = u"morning"
    >>> st.start_time = datetime.time(8,30)
    >>> st.end_time = datetime.time(12,30) 
    >>> st.language = "en"
    >>> session.add(st)
    >>> st.group_sitting_type_id
    >>> venue1 = domain.Venue()
    >>> venue1.short_name=u"Venue 1"
    >>> venue1.language = "en"
    >>> session.add(venue1)
    >>> venue2 = domain.Venue()
    >>> venue2.short_name=u"Venue 2"
    >>> venue2.language = "en"
    >>> session.add(venue2)
    >>> session.flush()
    >>> parliament = domain.Parliament( short_name=u"p_1", start_date=datetime.datetime.now(), election_date=datetime.datetime.now())
    >>> parliament.language = "en"
    >>> session.add(parliament)
    >>> session.flush()
    >>> sit1 = domain.GroupSitting()
    >>> sit1.start_date = datetime.datetime(2000,1,1,2,0)
    >>> sit1.end_date = datetime.datetime(2000,1,1,4,0)
    >>> sit1.group_sitting_type = st
    >>> sit1.group_id = parliament.group_id
    >>> sit1.language = "en"
    >>> session.add(sit1)
    >>> sit11 = domain.GroupSitting()
    >>> sit11.start_date = datetime.datetime(2000,1,1,2,0)
    >>> sit11.end_date = datetime.datetime(2000,1,1,4,0)
    >>> sit11.group_sitting_type = st
    >>> sit11.group_id = parliament.group_id
    >>> sit11.language = "en"
    >>> session.add(sit11)
    >>> sit2 = domain.GroupSitting()
    >>> sit2.start_date = datetime.datetime(2000,1,1,5,0)
    >>> sit2.end_date = datetime.datetime(2000,1,1,8,0)
    >>> sit2.group_sitting_type = st
    >>> sit2.group_id = parliament.group_id
    >>> sit2.language = "en"
    >>> session.add(sit2)
    >>> sit21 = domain.GroupSitting()
    >>> sit21.start_date = datetime.datetime(2000,1,1,5,0)
    >>> sit21.end_date = datetime.datetime(2000,1,1,8,0)
    >>> sit21.group_sitting_type = st
    >>> sit21.group_id = parliament.group_id
    >>> sit21.language = "en"
    >>> session.add(sit21)
    >>> session.flush()
    
Venue Bookings:
---------------

    >>> import bungeni.models.venue as venue
    >>> venue.get_unavailable_venues(datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,1,23,59))
    []
    >>> venue.get_available_venues(datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,1,23,59))
    [<bungeni.models.domain.Venue object at ...>, 
    <bungeni.models.domain.Venue object at ...>]
        
    >>> sit1.venue_id = venue1.venue_id
    >>> session.flush()
    
this venue is not available anymore for other sittings:
    >>> venue.get_unavailable_venues( datetime.datetime(2000,1,1,0,0),datetime.datetime(2000,1,1,23,59) )
    [<bungeni.models.venue.BookedVenue object at ...>]
    >>> venue.get_unavailable_venues( datetime.datetime(2000,1,1,0,0),datetime.datetime(2000,1,1,23,59), sit2 )
    [<bungeni.models.venue.BookedVenue object at ...>]
    >>> venue.check_availability(datetime.datetime(2000,1,1,0,0),datetime.datetime(2000,1,1,23,59), venue1)
    False

    >>> venue.get_available_venues( datetime.datetime(2000,1,1,0,0),datetime.datetime(2000,1,1,23,59) )
    [<bungeni.models.domain.Venue object at ...>]
    
but for the sitting itself it is still available:
    >>> venue.get_unavailable_venues( datetime.datetime(2000,1,1,0,0),datetime.datetime(2000,1,1,23,59), sit1 )
    []
    >>> venue.check_availability(datetime.datetime(2000,1,1,0,0),datetime.datetime(2000,1,1,23,59), venue1, sit1)
    True
    
but not for other sittings
    >>> venue.check_availability(datetime.datetime(2000,1,1,0,0),datetime.datetime(2000,1,1,23,59), venue1, sit2)
    False
    
    >>> venue.get_unavailable_venues( datetime.datetime(2000,1,1,2,30),datetime.datetime(2000,1,1,2,59) )
    [<bungeni.models.venue.BookedVenue object at ...>]

    >>> venue.get_unavailable_venues( datetime.datetime(2000,1,1,4,1),datetime.datetime(2000,1,1,23,59) )
    []

    >>> sit2.venue_id = venue2.venue_id
    >>> session.flush()
    >>> venue.get_unavailable_venues( datetime.datetime(2000,1,1,5,0),datetime.datetime(2000,1,1,23,59) ) 
    [<bungeni.models.venue.BookedVenue object at ...>]
    
    
    >>> venue.get_available_venues( datetime.datetime(2000,1,1,0,0),datetime.datetime(2000,1,1,23,59) )
    []

    >>> venue.get_available_venues( datetime.datetime(2000,1,1,0,0),datetime.datetime(2000,1,1,23,59), sit2 )
    [<bungeni.models.domain.Venue object at ...>]
    
    
cleanup
-------
  >>> session.flush()
  >>> session.commit()
  >>> session.close()
  
  
