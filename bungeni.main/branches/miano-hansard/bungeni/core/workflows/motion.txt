Motion workflow
===============

Setup
-----

Setting up database connection and utilities:

  >>> from bungeni.core.testing import setup_db
  >>> engine = setup_db()
  
  >>> from bungeni.core.workflows.testing import setup_security_adapters
  >>> setup_security_adapters()
  
  >>> from bungeni.alchemist import Session
  >>> session = Session()
  
Imports.

  >>> from bungeni.models import domain
  >>> from bungeni.models import schema

  >>> from bungeni.core.workflows.testing import version_increment_for_state

Motions are versionable.
  
  >>> from zope.interface import classImplements
  >>> from bungeni.models.interfaces import IVersionable
  >>> classImplements(domain.Motion, IVersionable)

Content creation
----------------

  >>> from bungeni.models.testing import add_content
  
  >>> country = add_content(
  ...     domain.Country,
  ...     country_id='KE',
  ...     iso_name=u"KENYA",
  ...     language="en",
  ...     country_name=u"Kenya")

  >>> mp_1 = add_content(
  ...        domain.User,
  ...        u"minister 1",
  ...        first_name=u"a", 
  ...        last_name=u'ab', 
  ...        birth_country="KE",
  ...        email=u"mp1@example.com", 
  ...        date_of_birth=today,
  ...        language="en",
  ...        gender='M')

  >>> parliament = add_content(
  ...    domain.Parliament,
  ...    short_name=u"p_1",
  ...    language="en",
  ...    start_date=yesterday,
  ...    election_date=yesterday)

  >>> motion = add_content(
  ...     domain.Motion,
  ...     short_title=u"My subject",
  ...     owner_id = mp_1.user_id,
  ...     language="en")

Principals
----------
  
  >>> from bungeni.core.testing import create_principal, create_participation
  >>> import zope.security.management
  >>> zope.security.management.endInteraction()

  >>> member = create_principal("member", "Member", ())
  >>> zope.security.management.newInteraction(create_participation(member))
  
Actions
-------

  >>> from bungeni.core.workflow.interfaces import IWorkflowController
  
!+FIRETRANSITION(mr, feb-2011) should review/update/evolve tests below to use 
fireTransition() (instead of directly executing actions), and to use the new
convention adopted for internal transition ids composed of:
    "%s-%s" % (source_state, destination_state)

  >>> #from bungeni.core.workflows.motion import actions 
  >>> wfc = IWorkflowController(motion)
  >>> wfc
  <bungeni.core.workflow.states.WorkflowController object at ...>
  >>> wf = wfc.workflow
  
"Create". This action assigns the role of "Owner" and sets the
parliament id.
  
  >>> actions.create(motion)
  >>> motion.parliament_id == parliament.parliament_id
  True

  >>> from zope.securitypolicy.interfaces import IPrincipalRoleMap
  >>> tuple(IPrincipalRoleMap(motion).getRolesForPrincipal("member"))
  ((u'bungeni.Owner', PermissionSetting: Allow),)

Conditions
----------
!+CUSTOM(mr, mar-2011) update to test with bungeni_custom

  >>> from bungeni_custom import _conditions
  
"Is scheduled".

  >>> _conditions.is_scheduled(motion)
  False

  >>> from bungeni.models.testing import create_sitting
  >>> sitting = create_sitting(parliament.parliament_id)

  >>> scheduling = add_content(
  ...     domain.ItemSchedule,
  ...     sitting_id=sitting.sitting_id,
  ...     item_id=motion.doc_id)
  
  >>> _conditions.is_scheduled(motion)
  True

"Submit".

!+FIRETRANSITION(mr, dec-2010) workflow transitions (only partly) executed in 
this way do not create the expected auditlog. 

  >>> actions.submit(motion)
  
  #>>> motion.submission_date == today
  #True

"Received by clerk". A new version is created.

    >>> actions.receive(motion)
    >>> version_count += version_increment_for_state(motion)
    >>> session.refresh(motion) # !+ otherwise motion.versions is stale
    >>> assert version_count == len(motion.versions)
    >>> version_count # just once, to ensure version_increment_for_state works
    2

"Require edit by MP".

    >>> actions.require_clarification(motion)
    >>> version_count += version_increment_for_state(motion)
    >>> session.refresh(motion) # !+ otherwise motion.versions is stale
    >>> assert version_count == len(motion.versions)

"Complete".

    >>> actions.complete(motion)
    >>> version_count += version_increment_for_state(motion)
    >>> session.refresh(motion) # !+ otherwise motion.versions is stale
    >>> assert version_count == len(motion.versions)

"Approve".

    >>> actions.approve(motion)
    >>> version_count += version_increment_for_state(motion)
    >>> session.refresh(motion) # !+ otherwise motion.versions is stale
    >>> assert version_count == len(motion.versions)

"Reject".

  >>> actions.reject(motion)

"Require amendment".

    >>> actions.require_recomplete(motion)
    >>> version_count += version_increment_for_state(motion)
    >>> session.refresh(motion) # !+ otherwise motion.versions is stale
    >>> assert version_count == len(motion.versions)

"MP clarify".

    >>> actions.require_clarification(motion)
    >>> version_count += version_increment_for_state(motion)
    >>> session.refresh(motion) # !+ otherwise motion.versions is stale
    >>> assert version_count == len(motion.versions)

"Schedule".

  >>> actions.schedule(motion)

"Defer".

  >>> actions.defer(motion)

"Elapse".

  >>> actions.elapse(motion)


Notifications
-------------

  >>> from bungeni.core.workflows import motion as notification

Setup mock delivery component.

  >>> import zope.sendmail.interfaces
  
  >>> class MockMailDelivery(object):
  ...     interface.implements(zope.sendmail.interfaces.IMailDelivery)
  ...
  ...     def send(self, *args):
  ...         print "From: %s\nTo: %s\n\n%s" % args

  >>> component.provideUtility(MockMailDelivery())

Set up a user.

  >>> user = add_content(
  ...     domain.User,
  ...     first_name=u'John',
  ...     last_name=u'Doe',
  ...     email='john.doe@localhost',
  ...     language="en",
  ...     owner_id=1)
  
    >>> motion.owner_id = user.user_id
    >>> #!+NOTIFICATION_SETTINGS = False
    >>> session.flush()

Motion received.
  
  >>> notification.SendNotificationToMemberUponReceipt(motion)

Let's change our setting for receive notification so an email message
is dispatched.

    >>> #!+NOTIFICATION_SETTINGS = True
    >>> notification.SendNotificationToMemberUponReceipt(motion)
    From: clerks.office@parliament.go.tld
    To: "John Doe" <john.doe@localhost>...
    Subject: Motion received: My subject...
  
Send notification to Clerk's office upon submit.

  >>> notification.SendNotificationToClerkUponSubmit(motion)
  From: "John Doe" <john.doe@localhost>
  To: clerks.office@parliament.go.tld ...
  Subject: Motion submitted: My subject ...


A motion was rejected by the speakers office.
  >>> notification.SendNotificationToMemberUponReject(motion)
  From: speakers.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> ...
  Subject: Motion rejected: My subject ...


A motion needs clarification by the MP
  >>> notification.SendNotificationToMemberUponNeedsClarification(motion)
  From: clerks.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> ...
  Subject: Motion needs clarification: My subject ...


A motion was deferred by Clerk's office.
  >>> notification.SendNotificationToMemberUponDeferred(motion)
  From: speakers.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> ...
  Subject: Motion deferred: My subject ...

A motion was scheduled by Speakers office.
  >>> notification.SendNotificationToMemberUponSchedule(motion)
  From: clerks.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost> ...
  Subject: Motion scheduled: My subject ...

A motion was postponed by the speakers office.
!+ remove, grep for: SendNotificationToMemberUponPostponed IMotionPostponedEvent
  >>> #notification.SendNotificationToMemberUponPostponed(motion)
  #From: clerks.office@parliament.go.tld
  #To: "John Doe" <john.doe@localhost> ...
  #Subject: Motion postponed: My subject ...

Cleanup
-------
  >>> session.flush()
  >>> session.commit()
  >>> session.close()
