Setup
-----

  >>> from bungeni.alchemist import Session
  >>> import copy, datetime
 
  some setup for tests
  >>> import bungeni.models.testing
  >>> db = bungeni.models.testing.setup_db()
  >>> session=Session()
  >>> from bungeni.models import domain
   

setup a sitting
Sittings
--------

any group can schedule a sitting, a sitting is treated as a physical
meeting of the group by the system. 

  >>> st = domain.SittingType()
  >>> st.sitting_type = u"morning"
  >>> st.start_time = datetime.time(8,30)
  >>> st.end_time = datetime.time(12,30)
  >>> st.language = "en"
  >>> session.add(st)
  >>> session.flush()

  >>> st.sitting_type_id
  1L
  >>> parliament = domain.Parliament( short_name=u"p_1", start_date=datetime.datetime.now(), election_date=datetime.datetime.now())
  >>> parliament.language = "en"
  >>> session.add(parliament)
  >>> session.flush()
  >>> sit1 = domain.GroupSitting()
  >>> sit1.start_date = datetime.datetime(2000,1,1,2,0)
  >>> sit1.end_date = datetime.datetime(2000,1,1,4,0)
  >>> sit1.sitting_type_id = st.sitting_type_id
  >>> sit1.group_id = parliament.group_id
  >>> sit1.language = "en"
  >>> session.add(sit1)
  >>> session.flush()
 
  >>> sit11 = domain.GroupSitting()
  >>> sit11.start_date = datetime.datetime(2000,1,1,2,0)
  >>> sit11.end_date = datetime.datetime(2000,1,1,4,0)
  >>> sit11.sitting_type = st
  >>> sit11.group_id = parliament.group_id
  >>> sit11.language = "en"
  >>> session.add(sit11)
  >>> session.flush()
 
  >>> sit2 = domain.GroupSitting()
  >>> sit2.start_date = datetime.datetime(2000,1,1,5,0)
  >>> sit2.end_date = datetime.datetime(2000,1,1,8,0)
  >>> sit2.sitting_type = st
  >>> sit2.group_id = parliament.group_id
  >>> sit2.language = "en"
  >>> session.add(sit2)
  >>> session.flush()
 
  >>> sit21 = domain.GroupSitting()
  >>> sit21.start_date = datetime.datetime(2000,1,1,5,0)
  >>> sit21.end_date = datetime.datetime(2000,1,1,8,0)
  >>> sit21.sitting_type_id = st.sitting_type_id
  >>> sit21.group_id = parliament.group_id
  >>> sit21.language = "en"
  >>> session.add(sit21)
  >>> session.flush()
 
 
  >>> rt = domain.ResourceType()
  >>> rt.short_name = u"type of resource"
  >>> rt.language = "en"
  >>> session.add(rt)
  >>> session.flush()
 
  >>> r1 = domain.Resource()
  >>> r1.short_name = u"resource 1"
  >>> r1.resource_type_id = rt.resource_type_id
  >>> r1.language = "en"
  >>> session.add(r1)
  >>> session.flush()
 
  >>> r2 = domain.Resource()
  >>> r2.short_name = u"resource 2"
  >>> r2.resource_type_id = rt.resource_type_id
  >>> r2.language = "en"
  >>> session.add(r2)
  >>> session.flush()
  
  >>> r3 = domain.Resource()
  >>> r3.short_name = u"resource 3"
  >>> r3.resource_type_id = rt.resource_type_id
  >>> r3.language = "en"
  >>> session.add(r3)
  >>> session.flush()

  >>> import bungeni.models.resourcebooking as rb
 

 
first confirm that all resources are available:
   >>> rb.get_available_resources( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59) ) 
   [(1,), (2,), (3,)]
   
   >>> rb.get_unavailable_resources( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59) ) 
   []
   
   >>> rb.check_bookings( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59), r1)
   []
   >>> rb.check_bookings( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59), r2)
   []
   >>> rb.check_bookings( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59), r3)
   []
   
book resources:
   >>> rb.book_resource( sit1, r1 )
   
so r1 must not be available any more:

   >>> rb.get_available_resources( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59) ) 
   [(2,), (3,)]
   >>> rb.get_available_resources( datetime.datetime(2000,1,1,2,0), datetime.datetime(2000,1,1,4,00) ) 
   [(2,), (3,)]
   >>> rb.get_available_resources( datetime.datetime(2000,1,1,3,0), datetime.datetime(2000,1,1,3,30) ) 
   [(2,), (3,)]
   >>> rb.get_available_resources( datetime.datetime(2000,1,1,4,1), datetime.datetime(2000,1,1,23,30) )
   [(1,), (2,), (3,)]
   >>> rb.check_bookings( datetime.datetime(2000,1,1,1,0), datetime.datetime(2000,1,1,3,0), r1)
   [<bungeni.models.resourcebooking.BookedResources object at ...>]
   >>> rb.check_bookings( datetime.datetime(2000,1,1,5,0), datetime.datetime(2000,1,1,23,0), r1)
   []
   >>> rb.check_bookings( datetime.datetime(2000,1,1,3,50), datetime.datetime(2000,1,2,23,59), r1)
   [<bungeni.models.resourcebooking.BookedResources object at ...>]
   >>> rb.get_available_resources( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59) ) 
   [(2,), (3,)]
     
   >>> rb.check_bookings( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59), r2)
   [] 
       
   >>> rb.book_resource( sit1, r2 )
   >>> rb.book_resource( sit1, r2 )
   already booked
      
   >>> rb.check_bookings( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59), r2)
   [<bungeni.models.resourcebooking.BookedResources object at ...>]
   
   >>> rb.get_available_resources( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59) ) 
   [(3,)]

   >>> len(rb.get_unavailable_resources( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59) ) )
   2 


conflicting booking:
   
   >>> rb.book_resource(  sit11, r2 )
   not available

remove booking and try again:

   >>> rb.unbook_resource(  sit1, r2 )
   >>> rb.book_resource(  sit11, r2 )
   
   >>> rb.book_resource(  sit2, r1 )
   >>> rb.book_resource( sit21, r2 )
      
      
   >>> len(rb.check_bookings( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59), r1))
   2
      
   >>> len(rb.check_bookings( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59), r2))
   2
   
   >>> len(rb.get_unavailable_resources( datetime.datetime(2000,1,1,0,0), datetime.datetime(2000,1,2,23,59) ) )
   4
   
   
cleanup
-------
  >>> session.flush()
  >>> session.commit()
  >>> session.close()
            
