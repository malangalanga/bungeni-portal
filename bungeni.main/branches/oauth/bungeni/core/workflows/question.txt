Question and response workflow
==============================


Setup
-----

Imports.

  >>> from bungeni.models import interfaces
  >>> from bungeni.models import domain

Questions are versionable.
  
  >>> from zope.interface import classImplements
  >>> classImplements(domain.Question, interfaces.IQuestion)

Setting up database connection and utilities:

  >>> from bungeni.core.testing import setup_db
  >>> engine = setup_db()
  >>> from bungeni.alchemist import Session
  >>> session = Session()

  >>> from bungeni.core.workflows.testing import setup_security_adapters
  >>> setup_security_adapters()

  >>> from bungeni.core.workflows.testing import version_increment_for_state

Principals
----------

  >>> from bungeni.core.testing import set_interaction
  >>> set_interaction(None)

In order to create a participation, we need a principal:

  >>> from bungeni.core.testing import create_principal
  >>> member = create_principal("member", "Member", ())
  >>> clerk = create_principal("clerk", "Clerk", ())
  >>> speaker = create_principal("speaker", "Speaker", ())
  >>> minister_1 = create_principal("minister 1", "Minister", ())
  >>> minister_2 = create_principal("minister 2", "Minister", ())

Assign roles.

  >>> import zope.securitypolicy.interfaces
  >>> global_prm = zope.securitypolicy.interfaces.IPrincipalRoleMap(app)
  >>> global_prm.assignRoleToPrincipal(u"bungeni.MP", "member")
  >>> global_prm.assignRoleToPrincipal(u"bungeni.Clerk", "clerk")
  >>> global_prm.assignRoleToPrincipal(u"bungeni.Speaker", "speaker")
  >>> global_prm.assignRoleToPrincipal(u"bungeni.Minister", "minister 1")
  >>> global_prm.assignRoleToPrincipal(u"bungeni.Minister", "minister 2")


Content creation
----------------

    >>> set_interaction(clerk)
  >>> from bungeni.models.testing import add_content

  >>> parliament = add_content(
  ...    domain.Parliament,
  ...    short_name=u"p_1",
  ...    language="en",
  ...    start_date=yesterday,
  ...    election_date=yesterday)
  
  >>> gov = add_content(
  ...    domain.Government,
  ...    short_name=u"gov_1",
  ...    language="en",
  ...    start_date=yesterday,
  ...    parliament_id=parliament.parliament_id)
  
  >>> ministry = add_content(
  ...    domain.Ministry,
  ...    short_name=u"ministry",
  ...    language="en",
  ...    start_date=yesterday,
  ...    parent_group_id=gov.group_id)

We need a parliament, government ministry and ministers to whom we can
send the question notifications.

  >>> country = add_content(
  ...    domain.Country,
  ...    country_id="KE",
  ...    iso_name = u"KENYA",
  ...    language="en",
  ...    country_name=u"Kenya")
  
  >>> mp_1 = add_content(
  ...    domain.User,
  ...    u"minister 1",
  ...    first_name=u"a", 
  ...    last_name=u"ab", 
  ...    birth_country="KE",
  ...    email=u"mp1@example.com", 
  ...    date_of_birth=today,
  ...    language="en",
  ...    gender="M")
  
  >>> mp_2 = add_content(
  ...    domain.User,
  ...    u"minister 2",
  ...    first_name=u"b", 
  ...    last_name=u"bc", 
  ...    birth_country="KE",
  ...    date_of_birth=today,
  ...    email=u"mp2@example.com",
  ...    language="en",
  ...    gender="M")
  
  >>> mp_3 = add_content(
  ...    domain.User,
  ...    u"member",
  ...    first_name=u"c", 
  ...    birth_country="KE",
  ...    last_name=u"cd",
  ...    date_of_birth=today,
  ...    email=u"mp3@example.com", 
  ...    language="en",
  ...    gender="F")

    >>> c1 = add_content(
    ...    domain.User,
    ...    "clerk",
    ...    first_name="d", 
    ...    birth_country="KE",
    ...    last_name="de",
    ...    date_of_birth=today,
    ...    email="c1@example.com", 
    ...    language="en",
    ...    gender="M")
    
    >>> s1 = add_content(
    ...    domain.User,
    ...    "speaker",
    ...    first_name="e", 
    ...    birth_country="KE",
    ...    last_name="ef",
    ...    date_of_birth=today,
    ...    email="s1@example.com", 
    ...    language="en",
    ...    gender="F")

!+setParliamentId(mr, mar-2011) we manually set the parliament_id here and 
remove the call to setParliamentId() when creating the question -- the 
parliament_id is automatically set on a question (when saved to the db) 
that is created via the UI form. 
    
    >>> set_interaction(member)

  >>> question = add_content(
  ...     domain.Question,
  ...     title=u"My subject",
  ...     body=u"The question",
  ...     owner_id=mp_3.user_id,
  ...     language="en",
  ...     doc_type="ordinary",
  ...     response_type="written",
  ...     parliament_id=parliament.parliament_id)
    
  >>> question.__parent__ = app
  
  >>> from bungeni.models.testing import create_sitting
  >>> sitting = create_sitting(parliament.parliament_id, "en")

Set up a security mapping.

  >>> qprm = zope.securitypolicy.interfaces.IPrincipalRoleMap(question)


!+register_specific_workflow_adapter
    >>> from bungeni.capi import capi
    >>> ti = capi.get_type_info("question")
    >>> from bungeni.core.workflows import adapters
    >>> adapters.register_specific_workflow_adapter(ti)

!+IRolePermissionMap is different for different workflow status values...
  >>> qrpm = zope.securitypolicy.interfaces.IRolePermissionMap(question)
  

Questions transitions 
-------------------------------------

  >>> from bungeni.core.workflow.interfaces import IWorkflowController
  >>> wfc = IWorkflowController(question)
  >>> wfc
  <bungeni.core.workflow.states.WorkflowController object at ...>
  >>> wf = wfc.workflow
  >>> wf
  <bungeni.core.workflow.states.Workflow 'question' object at ...>
  >>> from bungeni.core.workflow.interfaces import IWorkflow
  >>> wf is IWorkflow(question)
  True


    >>> from bungeni.core.testing import refresh_dc_registrations
    >>> refresh_dc_registrations()
    >>> from zope.dublincore.interfaces import IDCDescriptiveProperties 
    >>> IDCDescriptiveProperties(question).description
    u'Submitted by c cd.'


PRINCIPAL: member

  >>> from bungeni.models.utils import get_principal_id
  >>> get_principal_id()
  'member'

-------------------------------------
Transition: "create" - assigns the role of "Owner" and sets the parliament id.

!+ generalize these tests to not assume predefined transition names / sequence!

!+initializeWorkflow(mr, oct-2011) should not the question workflow be made to
auto-kick-in on question creation, as in application, via the event handlers?

  >>> wfc.fireAutomatic()
  >>> question.status
  'draft'

  >>> question.parliament_id==parliament.parliament_id
  True
  
  >>> tuple(qprm.getRolesForPrincipal("member"))
  ((u'bungeni.Owner', PermissionSetting: Allow),)
  >>> tuple(qprm.getRolesForPrincipal("clerk"))
  ()
  >>> tuple(qprm.getRolesForPrincipal("speaker"))
  ()
  >>> tuple(qprm.getRolesForPrincipal("minister 1"))
  ()
  >>> tuple(qprm.getRolesForPrincipal("minister 2"))
  ()


PERMISSIONS for member principal for "draft" question.status
  
  >>> from zope.security import checkPermission
  >>> [ checkPermission("bungeni.question.Edit", question), 
  ...   checkPermission("bungeni.question.Add", question), 
  ...   checkPermission("bungeni.question.View", question), 
  ...   checkPermission("bungeni.question.Delete", question), 
  ...   checkPermission("bungeni.attachment.Add", question), 
  ...   checkPermission("bungeni.attachment.Edit", question),
  ... ]
  [True, True, True, True, True, True]

TODO: also check permissions for other roles, i.e.
    <deny permission="zope.View" role="bungeni.Clerk" />
    <deny permission="zope.View" role="bungeni.Speaker" />
    <deny permission="zope.View" role="bungeni.Minister" />
    <deny permission="zope.View" role="bungeni.Authenticated" /> 
    <deny permission="zope.View" role="bungeni.Anonymous" />
this would require to run with an interaction, one with a participation that 
consists of a principal with the specific role.

TODO: also check Clerk create_on_behalf_of MP

-------------------------------------

Setup mock delivery component.

  >>> import zope.sendmail.interfaces
  
  >>> class MockMailDelivery(object):
  ...     interface.implements(zope.sendmail.interfaces.IMailDelivery)
  ...
  ...     def send(self, *args):
  ...         pass#print "From: %s\nTo: %s\n\n%s" % args

  >>> component.provideUtility(MockMailDelivery())

  >>> question.status
  'draft'
  
  >>> version_count = len(question.versions)
  >>> version_count
  0

Transition: "submit"

    >>> question.owner is mp_3
    True
    >>> wfc.fireTransition("%s-submitted" % question.status)
    >>> question.status
    'submitted'
    >>> version_count += version_increment_for_state(question)
    >>> session.refresh(question) # !+ otherwise question.versions is stale
    >>> assert version_count == len(question.versions)
    >>> version_count # just once, to ensure version_increment_for_state works
    1

  >>> tuple(qprm.getRolesForPrincipal("member"))
  ((u'bungeni.Owner', PermissionSetting: Allow),)

  >>> tuple(qprm.getRolesForPrincipal("clerk"))
  ()
  >>> #tuple(qrpm.getRolesAndPermissions())
  >>> #tuple(qrpm.getPermissionsForRole(u"bungeni.Owner"))
  >>> #tuple(qrpm.getRolesForPermission(u"bungeni.question.Edit"))

Version instances are not workflowed.

    >>> version_1 = question.versions[0]
    >>> version_1
    <bungeni.models.domain.DocVersion object at ...>
    >>> unicode(version_1.audit.type) #!+bin/test -c bungeni.core -t question.txt
    u'question'
    
    >>> IWorkflow(version_1, None) is None
    True
    

PRINCIPAL: clerk

Switch to the clerk, and check permission for Clerk on the question 
in "submitted" state:

  >>> set_interaction(clerk)
  >>> get_principal_id()
  'clerk'

-------------------------------------
Transition: "receive" (from "submit")

    >>> wfc.fireTransition("%s-received" % question.status)
    >>> question.status
    'received'
    >>> version_count += version_increment_for_state(question)
    >>> session.refresh(question) # !+ otherwise question.versions is stale
    >>> assert version_count == len(question.versions)



"Needs Clarification to Receive" (from "received" or "incomplete")

    >>> wfc.fireTransition("%s-clarification_required" % question.status)
    >>> question.status
    'clarification_required'
    >>> version_count += version_increment_for_state(question)
    >>> session.refresh(question) # !+ otherwise question.versions is stale
    >>> assert version_count == len(question.versions)



PRINCIPAL: member

Must re-submit:

    >>> set_interaction(member)
    >>> get_principal_id()
    'member'
    >>> wfc.fireTransition("%s-submitted" % question.status)
    >>> question.status
    'submitted'
    >>> version_count += version_increment_for_state(question)
    >>> session.refresh(question) # !+ otherwise question.versions is stale
    >>> assert version_count == len(question.versions)

  

PRINCIPAL: clerk

And re-receive:

    >>> set_interaction(clerk)
    >>> get_principal_id()
    'clerk'
    >>> wfc.fireTransition("%s-received" % question.status)
    >>> question.status
    'received'
    >>> version_count += version_increment_for_state(question)
    >>> session.refresh(question) # !+ otherwise question.versions is stale
    >>> assert version_count == len(question.versions)


"Complete" (from "received" or "incomplete")

    >>> wfc.fireTransition("%s-completed" % question.status)
    >>> question.status
    'completed'
    >>> version_count += version_increment_for_state(question)
    >>> session.refresh(question) # !+ otherwise question.versions is stale
    >>> assert version_count == len(question.versions)



PRINCIPAL: speaker

    >>> set_interaction(speaker)
    >>> get_principal_id()
    'speaker'

"Require recomplete" (from "completed")

    >>> wfc.fireTransition("%s-incomplete" % question.status)
    >>> question.status
    'incomplete'
    >>> version_count += version_increment_for_state(question)
    >>> session.refresh(question) # !+ otherwise question.versions is stale
    >>> assert version_count == len(question.versions)


PRINCIPAL: clerk

"Re-complete" (from "incomplete")

    >>> set_interaction(clerk)
    >>> get_principal_id()
    'clerk'

    >>> wfc.fireTransition("%s-completed" % question.status)
    >>> question.status
    'completed'
    >>> version_count += version_increment_for_state(question)
    >>> session.refresh(question) # !+ otherwise question.versions is stale
    >>> assert version_count == len(question.versions)



PRINCIPAL: speaker

"Approve" (from "completed")

  >>> set_interaction(speaker)
  >>> get_principal_id()
  'speaker'


    >>> wfc.fireTransition("%s-admissible" % question.status)
    >>> question.status
    'admissible'
    >>> version_count += version_increment_for_state(question)
    >>> session.refresh(question) # !+ otherwise question.versions is stale
    >>> assert version_count == len(question.versions)

  
!+FIRETRANSITION(mr, dec-2010) workflow transitions (only partly) executed in 
this way do not create the expected auditlog. 

  >>> #question.admissible_date == today
  True


PRINCIPAL: clerk

"Allow response" (send to ministry)

  >>> set_interaction(clerk)
  >>> get_principal_id()
  'clerk'

!+FIRETRANSITION(mr, feb-2011) should review/update/evolve tests below to use 
fireTransition() (instead of directly executing actions), and to use the new
convention adopted for internal transition ids composed of:
    "%s-%s" % (source_state, destination_state)

!+FIRETRANSITION(mr, mar-2011) now that fireTransition is being used instead of 
simply executing actions indpendetly, the following fails (correctly) as the
needed condition (written querstion) is not satisfied 

  >>> #wfc.fireTransition("%s-response_pending" % question.status)
  >>> #question.status
  #'response_pending'
  >>> #len(versions)
  #10
  >>> #question.ministry_submit_date == today
  #True


"Repond"

!+FIRETRANSITION(mr, mar-2011) complete response tests

  >>> #actions.answer(question)


Question conditions
-------------------
!+CUSTOM(mr, mar-2011) update to test with bungeni_custom

  >>> from bungeni_custom.workflows import _conditions
  
"Is scheduled".

  >>> _conditions.is_scheduled(question)
  False

  >>> from bungeni.models.testing import create_sitting
  >>> sitting = create_sitting(parliament.parliament_id)

  >>> scheduling = add_content(
  ...     domain.ItemSchedule,
  ...     sitting_id=sitting.sitting_id,
  ...     item_id=question.doc_id,
  ...     item_type=question.type)
  
  >>> _conditions.is_scheduled(question)
  True

"Is written response / ministry set".

    >>> _conditions.is_written_response(question)
    False
    
    >>> question.ministry_id = ministry.group_id
    >>> _conditions.is_written_response(question)
    True

  
Cleanup
-------

  >>> session.flush()
  >>> session.commit()
  >>> session.close()
  >>> set_interaction(None)

