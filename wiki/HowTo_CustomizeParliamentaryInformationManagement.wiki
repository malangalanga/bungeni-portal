#summary How to customize parliamentary information management

<wiki:toc max_depth="5" />

== Overview ==

=== The customization folder === 

Bungeni packages the customization aspects of the system in a specific folder. The default system comes packaged with a customization setup in 
the `src/bungeni_custom` folder within the `bungeni_apps/bungeni` folder.

The `bungeni_custom` looks like this :
{{{
bungeni_custom/
├── forms
├── __init__.py
├── notifications
├── registry
├── reporting
├── sys
├── translations
├── vocabularies
├── workflows
└── workspace
}}}

This structure provides points of access to different aspects of customization discussed later in this document.

We don't recommend making customizations in the default customization folder, instead the system provides a mechanism to create and use your own customization folder. This kind of setup will allow you to test your customization against the reference customization implementation provided out of the box in Bungeni.

=== How Bungeni knows which customization folder to use === 

Bungeni determines the customization folder to use on the basis of a `bungeni_custom.pth` customization path file.

This file can be found in the main bungeni installation folder `bungeni_apps/bungeni`.

The contents of this file simply indicate a folder where the system should look for the `bungeni_custom` package :

{{{
/home/undesa/bungeni_apps/bungeni/src
}}}

Changing the path here will tell bungeni to look for the customization folder in a different location.

=== Making a private customization folder ===

To create your own private customization folder do the following --

 * Create a copy of the `src/bungeni_custom` folder, and put it under `bungeni_apps/bungeni`, call it with a different name e.g. `my_custom`.
 * Edit the `bungeni_apps/bungeni/bungeni_custom.pth` file , and change the path in the file to :
	{{{
	/my/installation/path/bungeni_apps/bungeni
	}}}
    Where /my/installation/path is the folder under which the bungeni applications are installed.
  * Restart Bungeni and do a small test to verify if everything is working properly (e.g. login as a member and publish a question) 

Your customization folder tree should look like this under `/my/installation/path/bungeni_apps/bungeni`:
{{{
my_custom/
├── forms
├── __init__.py
├── notifications
├── registry
├── reporting
├── sys
├── translations
├── vocabularies
├── workflows
└── workspace
}}}

You can now start customizing workflows, vocabularies and workspaces in Bungeni in the `my_custom` folder.

=== Testing customizations ===


=== Best practices ===

 * You need to back up or better version control your customization folder since it isn't part of shipped bungeni source code. Which means if your server crashes for whatever reason and you have to reinstall and re-setup Bungeni, you will be able to restore the system and the default customisation since they are version controlled - but you won't be able to restore your own customizations unless you have your own backup.

 * Do Not make your customizations in the default `bungeni_custom` customization folder. This is intended only as a test customization setup and is version controlled and will recieve updates. Always use a private customization folder as specified aove.


 
== How to configure languages ==
=== Purpose ===
Here you can set the default launguage used in the Bungeni user interface as well as enable alternative languages.
If you have enabled more than one language, the default language (see below) will be used in the Bungeni user interface i.e. if the browser language is not one of the alternative languages.

=== How to enable and set the default language ===

Bungeni language configuration is managed in this file:
{{{
{BUNGENI_INSTALL_PATH}/src/bungeni_custom/__init__.py. 
}}}
The location of this file may be different if you have a custom configuration location. (See [HowTo_CustomizeParliamentaryInformationManagement#Using_the_customization_folder Using the customization folder])

The parameters in the table below will be found in this file and determine how languages are handled in Bungeni.

|| *Parameter (Sample)* || *Notes* ||
|| zope_i18n_allowed_languages = "ar en es es-do fr it nl pt ru sw tk" || A space separated string of language ids of available languages.<br/> To enable or disable language, add or remove its id from this list ||
|| _default_language = "en"_ || This is the default language used in the system. It should be one of those in `zope_i18n_allowed_languages`. ||
|| _right_to_left_languages = "ar"_ || This is a space separated list of language ids for which the user interface should be displayed right-to-left. <br/> These language ids must be a subset of `zope_i18n_allowed_languages` ||
|| _zope_i18n_compile_mo_files = True_ || Set this to True/False to turn on/off compiling of message catalogs into a binary format (faster). ||


Only enabled languages will show up in Bungeni's language menu. With the `zope_i18n_allowed_languages` setting above, this would be the resulting language menu.

http://bungeni-portal.googlecode.com/svn/wiki/images/languages-menu.png


== Vocabularies == 
=== Managing  vocabularies ===

== Roles == 

Roles in Bungeni are used to specify who has permission to perform different tasks. Please have a look at this [http://wiki.zope.org/zope3/secureobjects.html page] for a full description of how security works in Bungeni

=== System roles - what they mean and default usage ===

There are two main system roles that are essential to how Bungeni works, bungeni.Owner and bungeni.Signatory. This roles are used in Bungeni to assign permissions to the owner and signatory of a document respectively.

=== How to set up user defined roles ===

A Bungeni administrator may define additional parliament specific roles in bungeni_custom/sys/acl/roles.zcml. A role added here may then be associated with an office while adding an office.

<role title="Clerk" role="bungeni.Clerk"/>

In the example above, a role is created called bungeni.Clerk. The title "Clerk" is what appears in the UI. This role may then be used anywhere else in the system where a role may be specified eg. the workspace configuration or the workflow configuration.

To associate this role with an office, edit an office and select it in the "roles" select box.


==== Sub Roles ====

One may also add sub roles to Bungeni that may be used to grant finer grained permissions.

{{{
<bungeni:subrole id="bungeni.Clerk.QuestionClerk" title="Question Clerk" role="bungeni.Clerk"/>
}}}

In the above example, a new subrole is created to is subordinate to the bungeni.Clerk role. The title of the subrole is what appears in the UI and the ID is used elsewhere in the system.



== Parliamentary Metadata ==
=== Adding a parliament ===
=== Adding Parliamentary entities ===
=== Committees ===
=== Groups ===
=== Government ===
=== Users ===
=== Offices ===

== Documents ==
=== Enabling and disabling custom document types === 

== Forms ==
=== How to localize forms === 
=== Form UI (workspace) === 
=== Changing display order of fields === 
=== Show/Hide fields on a Form per mode ===  

== Workflow  ==
=== How to map documents/groups/membership workflow === 
=== How to configure documents/groups/membership workflow === 

== Workspaces ==
Every user who logs on to Bungeni has a workspace, where they may view, add and edit documents. The workspace in Bungeni is very similar to the interface provided by email applications such as Gmail or Yahoo mail.


The workspace has 3 main sections
  # my documents - Here a user finds all the documents that he has created, edited or signed in the lifetime of the current parliament
  # documents under consideration - This section contains all the documents currently going through the parliamentary document workflow that are viewable by other users ie. they are in states tagged "public" in the workflow configuration and are not tagged as being in terminal state.
  # scheduling - The schedule of sittings of the plenary and committees is found here. See section on scheduling


=== my documents section ===

The "my documents" section has four tabs

  * draft - This tab contains all the documents that the user is currently working on that have not been submitted to anyone else
  * inbox - This tab contains all the documents that require attention from the user, eg. a bill that requires clarification from an MP
  * sent - This tab contains documents that the user has worked on and submitted
  * archive - Documents this user submitted that have reached their terminal state in the current parliament are found in this tab


=== How to configure workspaces === 

Every document type has a workspace configuration file in the workspace folder of the bungeni_custom folder.

The administrator needs to specify which workspace tabs a document in a certain state will appear in for the different users.

For example

{{{
<state id="clarification_required">
  <tab id="inbox" roles="bungeni.Owner"/>
  <tab id="sent" roles="bungeni.Clerk"/>
</state>
}}}

The above snippet specifies that a document in the state, "clarification_required" will appear in the inbox of the person who introduced it(bungeni.Owner) and in the sent folder of the clerk(bungeni.clerk)

== Notification  ==




=== How to set up notifications === 

#summary Template writing guide for report generation templates

== Publications (agenda, agenda, minutes, reports) ==

<wiki:toc max-depth="3"/>

=== Purpose ===
Bungeni provides a facility to generate reports e.g. agenda, minutes, document reports e.t.c.
This section will explain how you may customise the templates used to generate reports.

=== Scheduling (Calendar) Reports ===
Within scheduling, the reporting infrastructure provides a facility to produce documents out of the sittings within a certain period. Some typical use-cases include:
 * agenda and minutes of a specific sitting
 * a report of bills/questions e.t.c to be discussed in the coming month or other time-frame

Below is a screenshot of a report generation session.
The templates detailed below will appear as options on the report generation screen.
Adding or deleting templates (discussed below) will determine the options provided to generate reports within this context.

http://bungeni-portal.googlecode.com/svn/wiki/images/reporting-scheduling-generation-session.png

=== Document Reports ===
The different documents in Bungeni e.g. bill, questions, e.t.c can also be download as PDF/ODT.
Document templates for the particular *document type* will determine the formattting og the PDF/ODT output.
Below is a sample of a document download session for a question: 

http://bungeni-portal.googlecode.com/svn/wiki/images/reporting-documents-download.png

=== How to customise templates ===
The templates are based on XHTML with an additional set of tags to support inclusion of bungeni content into the final document.
Templates are stored in *bungeni_custom* under: */reporting/templates*

Those used in scheduling go into the *scheduling* directory whereas those used for document reports will be in *documents*.
Once templates are added within these directories they become available as options when generating reports.

=== Structure of Templates ===
Each template is structurally composedof a configuration, head and body sections.

Here is a simple sample of a structure for a template:

{{{
<html xml:lang="en" xmlns:br="http://bungeni.org/reports">
  <br:config>
    <title>One week of questions Questions</title>
    <length>1w</length>
    <language>en</language>
  </br:config>
  <head>
    <title>Weekly Questions</title>
  </head>
  <body>
    <p>A blank report</p>
   </body>
</html>
}}}

==== Configuration section ====
The configuration section sets metadata associated with the current report type:
{{{
  <br:config>
    <title>Questions of the Week</title>
    <length>1w</length>
    <language>en</language>
  </br:config>
}}}
===== Configuration Options =====
|| *Option* || *Sample* || *Description* ||
|| title || `<title>Questions of the week</title>` || This is the report title. It can be referenced within the body. It is also displayed in menus within Bungeni ||
|| length || `<length>1w/length>` || Period covered by the report starting from a selected date. In this case - One(1) week. *More on this below*. ||
|| language || `<language>fr</language>` || The language of the content in generated report ||
|| doctypes || `<doctypes>question</doctypes>` || A space separated list of document types for which this template may generate reports. ^a^ ||

^a^ `Please note that the doctypes configuration parameter has meaning only in the context of document templates.`

====== Configuring Report Length ======
This is the notation used to specify the period covered by a report (_*n*_ is a positive integer greater than _1_)
    # _n_*h* evaluates to n hours such that `1h` evaluates to one (1) hour
    # _n_*d* evaluates to n days such that `5d` evaluates to five (2) days
    # _n_*w* evaluates to n weeks such that `4w` evaluates to four (4) weeks
    # We can also use combinations of _w_, _d_, _h_ depending on requirements

Below are sample timespans that can be used to specify the period covered by a report.
|| *Length* || *Evaluates to* || *Equivalent hours notation* ||
|| 1h || 1 hour || _N/A_ ||
|| 3d || 3 days || 72h ||
|| 2d6h || 2 days and 6 hours || 54h ||
|| 2w || 2 weeks || 336h ||

==== Body Section ====
Below you can see a sample of the body section of a report and customizable attributes.

{{{
  <body> 
    <div id="report-content">
        <h1 class="heading" br:type="text" br:source="title"/>
        <div id="listing-body">
            <div br:type="listing" br:source="sittings">
                <h2 br:type="text" br:source="title"/>
                <h3>Questions</h3>
                <div class="questions">
                    <ul br:type="listing" br:source="questions">
                        <li br:type="text" br:source="title"/>
                    </ul>
                </div>
            </div>
        </div>
    </div>
   </body>
}}}

===== Configuration options ====

|| *Tag* || *Value* || *Description* || *Example* ||
|| br:type || text || Includes the specified context variable as text || Display the title of a document as plain text: <br/> `<div br:type="text" br:source="title"/>` || 
|| || html || Includes the specified context variable as HTML || Display the body of a document as html: <br/> `<div br:type="html" br:source="body_text"/>` ||
|| || link || Renders a link to with the link as the named *br:url* parameter || Display a link to a document uri with the dublin core title as link text: <br/> `<a br:type="link" br:url="uri" br:source="dc:title/>"` ||
|| || listing || Generates a list of items || Display the list of titles of questions included in the template: <br/> `<ul br:type="listing" br:source="questions">`<br/>`    <li br:type="text" br:source="dc:title"/>` <br/> `</ul>` ||
|| br:source || A named context variable || names of available context variables are determined from the object available to the current template tag || See [HowTo_CustomizeParliamentaryInformationManagement#Available_context_names] ||
|| br:condition || A named context variable || This attribute determines if the current tag should be rendered.<br/> Checks existense of a value for the named context variable. || This tag will only be rendered if there is a title <br/> `<span br:source="title" br:condition="title"/>` ||

===== Available context names =====
The documentation for the names available for use in reports can generated from within Bungeni's home folder.
Simply run this script:
{{{
    ./bin/reporting-documentation
}}}
This will generate a tree in HTML of these names indiside the {{{docs/reporting/}}} folder within Bungeni's home folder.
You can open this file in any browser to see the tree of available names that can be incorporated in a report template.

If you are running Bungeni in debug mode, the reporting documentation can also be accessed from this address in a default installation.

{{{
    http://localhost:8081/docs/reporting/
}}}

Below is an image showing the generated tree of names:

http://bungeni-portal.googlecode.com/svn/wiki/images/reporting-sample-doctree.png

`Note that in the case of document templates the names available are limited to the particular document section.`
`For instance in the case of a bill only the names under `bills` in the above figure would be available to the report template.`

== Layout, theme and formats == 
The layout, look and feel of the portal is controlled by a theme template in conjunction with a set of css styles and rule files. A default theme is enabled for each Bungeni installation.

=== Enabling a country theme ===

Sample country themes exist at this location: http://bungeni-portal.googlecode.com/svn/portal.country_themes/trunk

To enable a country theme, edit the country_theme parameter in the Fabric 'setup.ini' file. The default setting is as follows:

{{{
[custom]
...
country_theme = default
}}}

Set this parameter to the appropriate value (_It is recommended to use the [http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2] codes_) e.g. for the Kenya theme the setting would be as follows:

{{{
[custom]
...
country_theme = ke
}}}

then run the following command in fabric


{{{
fab -H localhost enable_country_theme config_ini:portal 
}}}

=== Changing page layout ===   

Each country theme directory has a default structure:

{{{
|-- css
|-- images
`-- layout.html
}}}

The `layout.html` is an HTML file which defines the arrangement of HTML elements on both Portal and Workspace. It contains place-holder elements where to insert content from various Bungeni components. 

The image below shows screenshots of both portal and workspace areas on Bungeni.

http://bungeni-portal.googlecode.com/files/portal-and-workspace.png

Think of `layout.html` as a template document that defines where to insert content, say the search-form or main-navigation bar. The HTML attributes _`id`_ and _`class`_ are used to identify the elements where you will insert content. In the snippet below, the `portal-search` _id_ denotes the container element where the search-form will be inserted. 

{{{
<html>
  <head></head>
  <body>
   ...
   <!-- search -->
   <div id="portal-search"></div>
   ...
  </body>
</html>
}}}

There are rules that match content elements with the corresponding layout's elements. The rule to insert content into the above element looks like this:

{{{
   <!-- search -->
   <append content="children:#portal-search" theme="children:#portal-search" />
}}}

This will insert all elements *from* _`content`_ *into* _`theme`_ without copying the `#portal-search` element itself.
The rules are defined in `rules.xml` file found in:

{{{
{BUNGENI_INSTALL_PATH}/portal/src/portal.theme/portal/theme/static/themes/
}}}

To apply CSS styling, see *Styling with CSS* section below.

=== Changing the Menu Order and Structure ===   

=== Styling with CSS  ===  

The CSS files for styling Bungeni are broken down into two files:

  * reset.css - Has styling properties that affect width, height and alignment of Bungeni.

  * skin.css - Cosmetic changes such as text-color, background-color, border, typography are done here. 

styling in both CSS files is split into four major sections:

  * GENERAL - Applies site-wide
  * TEMPLATE-PORTAL - Anonymous user-space or public view
  * TEMPLATE-WORKSPACE - Logged in area
  * TEMPLATE-PORTAL-EXIST - Public view from an XML repository

Denoted at the start by a comment banner. e.g. for TEMPLATE-PORTAL

{{{
...

/* =============================================================================
   TEMPLATE PORTAL - Styling applied on portal
   ========================================================================== */

.template-portal {
    background: #eeeeee !important;
}

.template-portal #header-wrapper {
    background: #434343;
    border-bottom: 10px solid #c1c1c0;
}

...
}}}

These are top-level class selector's found on the HTML `body` tag e.g. `<body class="template-portal">`

To increase width of the portal from the default `960px`.

_reset.css_ -> find `template-portal` top-level section and look under width sub-section

Similar process for change background-color albeit under the _skin.css_ file

=== Theming Bungeni using Skins ===  

Bungeni skins are located under the custom folder:

{{{
{BUNGENI_INSTALL_PATH}/src/bungeni_custom/ 
}}}
