#summary How to customize parliamentary information management

<wiki:toc max_depth="5" />


----
== Overview ==

=== The customization folder === 

Bungeni packages the customization aspects of the system in a specific folder. 

Rather than start with no customization configuraitons, to make things easier, Bungeni comes packaged with a default customization folder which can be used as a basis for creating your own customizations. 

The system comes packaged with a default customization setup in the `src/bungeni_custom` folder (let's refer to this as `{BUNGENI_CUSTOM}` from here on) within your main Bungeni installation folder i.e. somewhere like `/my/installation/path/bungeni_apps/bungeni` (and let's refer to this one simply as `{BUNGENI}` from here on).

The customization folder structure looks like this :
{{{
bungeni_custom/
├── __init__.py
├── types.xml
├── forms/
├── notifications/
├── registry/
├── reporting/
├── sys/
├── translations/
├── vocabularies/
├── workflows/
└── workspace/
}}}

This structure provides points of access to different aspects of customization discussed later in this document. The content of the folders is described below.

|| *file / folder name* || *purpose* ||
|| __init__.py || special file that defines this folder as a _python package_; sets some general variables ||
|| types.xml || declares all custom types ||
|| forms || contains the ui.xml file which is used to customize forms in Bungeni ||
|| notifications || contains the notification configuration files used for workflow notifications ||
|| registry || Contains the format for numbering content||
|| reporting || Contains the reporting templates in XHTML format ||
|| sys || Contains configuration files related to database connections, openoffice access and default roles in the system ||
|| translations || Contains the localized message strings in [http://www.gnu.org/savannah-checkouts/gnu/gettext/manual/html_node/PO-Files.html PO format] ||
|| vocabularies || Contains the different vocabularies used in the system in VDEX format ||
|| workflows || Contains the Workflow customization files. There is one file per document type ||
|| workspace || Contains the Workspace customization files. There is one file per document type||


*We don't recommend making customizations in the default customization folder, instead the system provides a mechanism to create and use your own customization folder. This kind of setup will allow you to test your customization against the reference customization implementation provided out of the box in Bungeni*.

=== Creating your own customization folder === 

Bungeni determines the customization folder by means of a `{BUNGENI}/bungeni_custom.pth` _python package path_ customization file that simply contains a path to where the system should look for a `bungeni_custom` _python package_. The default one contains:

{{{
    /home/undesa/bungeni_apps/bungeni/src
}}}

Changing the path here will tell Bungeni to look for the customization folder, i.e. the `bungeni_custom` python package, in a different location.

=== Making a private customization folder ===

To create your own private customization folder do the following --

 * Create a copy of the `{BUNGENI}/src/bungeni_custom` folder, with *same name*--you may place it anywhere you like as long as it is outside of the `{BUNGENI}/src` folder. For example, let's place it at `{BUNGENI}/bungeni_custom`.
 * Edit the `{BUNGENI}/bungeni_custom.pth` file, and change the path contained in this file to point to the _parent_ folder containing your customization folder, i.e:
    {{{
	    /my/installation/path/bungeni_apps/bungeni
	    }}}
    Where {{{/my/installation/path}}} is the folder under which you have installed the Bungeni applications.
 * Restart Bungeni and do a small test to verify if everything is working properly (e.g. login as a member and publish a question) 

You can now start customizing workflows, vocabularies, workspaces, et cetera, for your Bungeni in _your_ `bungeni_custom` folder at at `/my/installation/path/bungeni_apps/bungeni/bungeni_custom`. 

Wherever you place your customization folder, let's refer to _your_ customization folder simply as `{MY_CUSTOM}` from now on.

=== Testing customizations ===

While customizing, it may sometimes be useful to switch between customizations (e.g. the one you are working on and the default one that bungeni installs with); you may switch anytime by simply re-editing the `{BUNGENI}/bungeni_custom.pth` file (and restarting Bungeni).

=== Best practices ===

 * You need to back up or better version control your customization folder since it isn't part of shipped bungeni source code. Which means if your server crashes for whatever reason and you have to reinstall and re-setup Bungeni, you will be able to restore the system and the default customisation since they are version controlled - but you won't be able to restore your own customizations unless you have your own backup.

 * Do *not* make your customizations in the default `bungeni_custom` customization folder. This is intended only as a test customization setup and is version controlled and will receive updates. Always use a private customization folder as specified above.




----
== How to configure languages ==
=== Purpose ===
Here you can set the default launguage used in the Bungeni user interface as well as enable alternative languages.
If you have enabled more than one language, the default language (see below) will be used in the Bungeni user interface i.e. if the browser language is not one of the alternative languages.

=== How to enable and set the default language ===

Bungeni language configuration is managed in this file:
{{{
    {MY_CUSTOM}/__init__.py
}}}
The location of this file may be different if you have a custom configuration location. (See [HowTo_CustomizeParliamentaryInformationManagement#Using_the_customization_folder Using the customization folder])

The parameters in the table below will be found in this file and determine how languages are handled in Bungeni.

|| *Parameter (Sample)* || *Notes* ||
|| zope_i18n_allowed_languages = "ar en es es-do fr it nl pt ru sw tk" || A space separated string of language ids of available languages.<br/> To enable or disable language, add or remove its id from this list ||
|| _default_language = "en"_ || This is the default language used in the system. It should be one of those in `zope_i18n_allowed_languages`. ||
|| _right_to_left_languages = "ar"_ || This is a space separated list of language ids for which the user interface should be displayed right-to-left. <br/> These language ids must be a subset of `zope_i18n_allowed_languages` ||
|| _zope_i18n_compile_mo_files = True_ || Set this to True/False to turn on/off compiling of message catalogs into a binary format (faster). ||


Only enabled languages will show up in Bungeni's language menu. With the `zope_i18n_allowed_languages` setting above, this would be the resulting language menu.

http://bungeni-portal.googlecode.com/svn/wiki/images/languages-menu.png


----
== Vocabularies ==

A vocabulary is a _value list_ where each value needs to be remembered (e.g. stored in a database) in a standard way, but represented in a variety of ways, and possibly in different languages. Such value lists may also be nested i.e. a _value tree_. Bungeni uses the [http://www.imsglobal.org/vdex/ Vocabulary Definition Exchange] (VDEX) standard to manage customizable vocabularies, each with a dedicated XML file, are to be found at: 

{{{
    {MY_CUSTOM}/vocabularies/
        attachment_type.vdex
        attendance_type.vdex
        bill_type.vdex
        change_procedure.vdex
        committee_continuity.vdex
        committee_type.vdex
        event_type.vdex
        gender.vdex
        logical_address_type.vdex
        marital_status.vdex
        member_election_type.vdex
        party.vdex
        postal_address_type.vdex
        question_type.vdex
        representation.vdex
        response_type.vdex
        sitting-activity-types.vdex
        sitting-convocation-types.vdex
        sitting-meeting-types.vdex
        subject-terms.vdex
        yes_no.vdex
}}}

=== Managing  vocabularies ===

To manage a vocabulary we simply modify the corresponding XML file that defines it (in [http://www.imsglobal.org/vdex/ VDEX format]). 

A vdex file defines a vocabulary _completely_. For example, we can add all individual terms that we need (the `<term>`), the _token_ value (the `<termIdentifier>`) for each term, the _display label_ (the `<caption>`) for each term, and in as many languages as we desire (a `<langstring>` per language per term).

Here, as an example, is a relatively simple vocabulary defining the types of Bills we choose to support in our parliament:
{{{
<vdex xmlns="http://www.imsglobal.org/xsd/imsvdex_v1p0" 
    orderSignificant="true" profileType="flatTokenTerms">
    <vocabName>
        <langstring language="en">bill_type</langstring>
    </vocabName>
    <vocabIdentifier>org.bungeni.metadata.vocabularies.bill_type</vocabIdentifier>
    <term>
        <termIdentifier>government</termIdentifier>
        <caption>
            <langstring language="en">Government Initiative</langstring>
            <langstring language="pt">Governo</langstring>
        </caption>
    </term>
    <term>
        <termIdentifier>member</termIdentifier>
        <caption>
            <langstring language="en">Member Initiative</langstring>
            <langstring language="pt">Membro</langstring>
        </caption>
    </term>
</vdex>
}}}


----
== Roles ==

Roles in Bungeni are used to specify who has permission to perform different tasks. Roles can be seen as a collection of permissions, e.g. a role could be “clerk office”. Permissions are like keys to doors that open to a particular functionality. For example, we might need the permission to view a document while another role may need permission also to edit it, etc.
“Roles” are used to grant a specific set of permissions to group/s, that could be e.g. Member of Parliament, staff of the Clerk Office etc. User belonging to these groups will have the rights that that specific role has.

=== System roles - what they mean and default usage ===

There are a number of system roles that are defined in the system

|| *Role ID* || *Use* ||
|| bungeni.Owner || The owner of a document, ie. the person who creates/moves a document ||
|| bungeni.Signatory || Signatory of a document ||
|| bungeni.Admin || The bungeni administrator ||
|| bungeni.Authenticated || All authenticated users ||
|| bungeni.Anonymous || Bungeni Visitor ||
|| bungeni.MP || Member of parliament ||
|| bungeni.Minister || Minister ||
|| bungeni.PoliticalGroupMember || Political Group Member ||
|| bungeni.Government || Member of Government ||
|| bungeni.CommitteeMember || Committee Member ||

=== How to set up user defined roles ===

A Bungeni administrator may define additional parliament specific roles in bungeni_custom/sys/acl/roles.zcml. A role added here may then be associated with an office while adding an office.

|| *attribute* || *example* || *note* ||
|| title || Legal Department || The title "Legal Department" is what appears in the user interface ||
|| id || legalDepartment || This is the ID that will be used anywhere else in the system where a role may be specified e.g. the workspace configuration or the workflow configuration. || 

Example

{{{
<role title="Legal Department" id="legalDepartment">
}}}

To associate the role above with an office, in “administration” go to “offices” and add the “Legal Department”, then select it in the "roles select box” “Legal Department”. If the Department already exists, just edit and select the "roles" select box “Legal Department”.


==== Sub Roles ====

If you need to have finer grained roles you may use sub-roles e.g. If you want all staff in the Clerk Office to see all parliamentary documents, but only the “Question Office” staff to actually edit questions and move then in the workflow. Please note that with “sub role” you can only “add permission” not deny permission that have been granted in the “parent role”.

|| *attribute* || *example* || *note* ||
|| title || Bill Office || The title "Bill Office" is what appears in the UI ||
|| id || legalDepartment_billOffice ||This is the ID that will be used anywhere else in the system where a role may be specified e.g. the workspace configuration or the workflow configuration. ||
|| role || legalDepartment || This is the ID parent role ||


Example

{{{
<bungeni:subrole id="legalOffice_billOffice" title="Bill Clerk" role="legalDepartment/>
}}}

The above example sets a new sub-role within the legalDepartment role. To associate this role with an office, in “administration” go to “offices” open the “Legal Department” and add  the “Bill Office” and then in the "roles select box” " select  “Bill Office”. Please note that the “Bill Office” sub-role will be available only within the parent “office”, in this case the Legal Department.


<wiki:comment>
----
== Parliamentary Metadata ==
=== Adding a parliament ===
=== Adding Parliamentary entities ===
=== Committees ===
=== Groups ===
=== Government ===
=== Users ===
=== Offices ===
</wiki:comment>


----
== Documents ==

=== Parliamentary document types ===

Bungeni provides rich support for a variety of *parliamentary document types* e.g. _Agenda Items_, _Bills_, _Motions_, _Questions_, _Tabled Documents_, with an easy possibility to extend for any number of other types.

All parliamentary document types are *workflowed*--with the workflow definition for any type being entirely customizable. Most other aspects of a document type definition are also customizable e.g. the various *user interface views* (via UI _descriptors_) for the type, or which *features* are enabled by the type.

Note that, because all object types (parliamentary documents or not) supported by Bungeni are customizable in a consistent way, the explanations below will sometimes also mention or refer to types other than just the *parliamentary document types* listed above, for example:
 # other _support_ document types e.g. _Events_ or _Attachments_;
 # other types that are _not_ parliamentary documents e.g. _Groups_ or _Sittings_.


=== Document _features_ ===

A document type may enable or disable a variety of *features*. When enabled for the document type, the feature is available for _each_ document of that type.

In each case, when a feature is enabled for a type, the system will also provide the necessary User Interface views for the feature e.g. if _audit_ is enabled for a type, then the UI will provide various ways to view the audit log of the document.

Here's a summary of supported features for parliamentary documents:

 * *audit*: all changes on a document are _audited_.
 * *version*: a document may be _versioned_.
 * *attachment*: _attachments_ may be added to the document.
 * *event*: _events_ (a special kind of support document) may be added to the document.
 * *signatory*: the document life-cycle, defined by its workflow, requires that other members of parliament _sign_ the document.
 * *schedule*: the document may be included in _sitting agenda_.
 * *workspace*: the document is to be included in the private user's _workspace_.
 * *notification*: user may subscribe and receive a variety of _notifications_ as the document changes.
 * *download*: the document may be available for _download_ e.g. in PDF.

Enabling, disabling and possibly parametrizing a feature for a type is part of the workflow definition for type--that must itself have been _enabled_.

=== Enabling and disabling custom document types ===

The entry point to type customization is the file:
{{{
    {MY_CUSTOM}/types.xml
}}}

A document type is enabled simply by including a {{{<doc>}}} element with the type name, and setting the attribute {{{@enabled="true"}}}. To disable, set the attribute {{{@enabled="false"}}} (or just remove the {{{<doc>}}} element): 

{{{
<types>
    <doc name="agenda_item" enabled="true" />
    <doc name="bill" enabled="true" />
    <doc name="motion" enabled="true" />
    <doc name="question" enabled="true" />
    <doc name="tabled_document" enabled="true" />
    ...
</types>
}}}

All custom document types must specify a name, that will be the _key_ used throughout the system to identify this type. 

As previously mentioned, all types are _workflowed_. By default, the workflow definition file for a type is expected to be at: 
{{{
    {MY_CUSTOM}/workflows/{TYPE_NAME}.xml
}}}
Similarly for other configuration aspects that have dedicated configuration files, namely {{{workspace}}} and {{{notification}}}.

Disabling a type means the type will *not* be registered (so will be _unknown_ to Bungeni), and all associated configuration e.g. workflow, descriptor, workspace, etc, will also not be loaded.

Group types and their memberships types are also set in a similar way. See the `{MY_CUSTOM}/types.xml` itself for further explanations and sample settings of these.



----
== Forms ==

The Bungeni User Interface allows a number of interactions or manipulations for instances of any given type. These include creating, viewing, modifying an instance or even listing multiple instances. The various UI views required for these interactions are all highly customizable, both in terms of appearance as well as in terms of who can do what on an instance of the type. We use:

 * the term *forms* as a more general term for the UI views for a type; 
 * the term *modes* to distinguish between the various interactions i.e. the above mentioned interactions correspond to the modes *add*, *view*, *edit* and *listing*.
 * *roles* to manage who may access specific fields in the different modes.

We use a _descriptor_ to describe all the above for each type in Bungeni. 

*All types* in Bungeni are customizable, some to a larger degree than others. For example custom types are (will be ;-) of course completely customizable (so, as an example, we may even disable them completely). But we may also quite extensively customize other system-required _support_ types (but not completely--as an example, we may _not_ disable them).

=== Form field _descriptors_ === 

We customize the form views per type in Bungeni by means of a _descriptor_ per type, contained in the file:
{{{
    {MY_CUSTOM}/forms/ui.xml
}}}
This file simply contains a UI _descriptor_ per type, and it looks something like this:
{{{
<ui roles="bungeni.Clerk bungeni.Speaker bungeni.Owner bungeni.Signatory ... bungeni.Anonymous">
    ...
    <descriptor name="question" order="13">
        ...
        <field name="title" displayable="view edit add listing" localizable="view edit listing">
            <show modes="view edit listing" />
        </field>
        <field name="type_number" displayable="view listing" localizable="view listing">
            <show modes="view listing" />
        </field>
        <field name="acronym" displayable="view edit add listing" localizable="view edit add listing">
            <show modes="view edit add" />
            <hide modes="listing" />
        </field>
        <field name="description" displayable="view edit add listing" localizable="view edit add listing">
            <show modes="view edit add" />
            <hide modes="listing" />
        </field>
        <field name="response_type" displayable="view edit add listing" localizable="view edit listing">
            <show modes="view edit listing" />
        </field>
        ...
    </descriptor>
    ...
</ui>
}}}

Each type _descriptor_ here controls the following aspects of the UI for the type:
 * the list of named UI fields for the type
 * the appearance _order_ of the UI fields for the type
 * the _modes_ in which the system may show/hide the field--this is the `@displayable` attribute (a convenience, provided for _information only_, may not modify)
 * the _modes_ for which each field *may be* customized--this is the `@localizable` attribute (a convenience, provided for _information only_, may not modify); all modes here are a sub-set of those in `@displayable`
 * the _modes_ that each field *is* customized in--the sum value of the `@modes` attribute of all the `<show>` and `<hide>` elements on the field; all modes in `@localizable` *must* also be set here, once and once only
 * for each _mode_, the _roles_ for whom the field is shown or not--the value of the _optional_ `@roles` attribute of all the `<show>` and `<hide>` elements on the field

The `descriptor/@order` attribute provides a hint to how references to descriptors themselves may be ordered e.g. for when generating navigation menus for browsing content such as the tree menu under the `admin` section.

The above extract describes some fields for a _question_. Here, as an example, is what the UI view might look like when we are logged in as the _Clerk_ and in *add* mode:

http://bungeni-portal.googlecode.com/svn/wiki/images/add-question.png

Note that the `type_number` field (that is the number of the question, updated at a later stage in the question's life-cycle) does not appear in *add* mode as per the field descriptor.

=== Changing display order of fields === 

The is simply a matter of re-ordering the `<field>` elements. So, for example if we would like to make `description` field appear after `response_type`, we simply move the field descriptor down i.e.
{{{
        ...
        <field name="response_type" displayable="view edit add listing" localizable="view edit listing">
            <show modes="view edit listing" />
        </field>
        <field name="description" displayable="view edit add listing" localizable="view edit add listing">
            <show modes="view edit add" />
            <hide modes="listing" />
        </field>
        ...
}}}
Then, whenever both fields are shown, the `description` field will appear above the `response_type` field. But note that this will have no visible affect in `listing` mode as `description` is not set to be displayed there (for all _roles_),

=== Show/Hide fields on a Form per mode ===  

Fields are customized using any number of `<show>` and `<hide>` elements, within the `<field>` element. Both the `<show>` and `<hide>` elements have the following attributes that allow customization of the field behavior:

 * _@modes_ - lists the modes that are to be shown or hidden. The only modes allowed here are the ones listed in the `field/@localizable` attribute.
 * _@roles_ - lists the roles for which the modes are to be shown or hidden. The only roles allowed here are the ones listed in the `ui/@roles` attribute. This is optional, and when not set all the roles listed in `ui/@roles` are implied.

`<show>` and `<hide>` do exactly what they are named as, `<show>` shows the field for the listed modes and roles, and `<hide>` hides the field for the listed modes and roles. A field may specify as many `<show>` and/or `<hide>` directives as it needs.
The action of the `show` or `hide` directive is applied to the list of roles specified in _@roles_--meaning also that the _opposite_ action is applied to the _complement_ of the set of roles specified in _@roles i.e. to all other roles in ui/@roles. Thus, `show` and `hide` are really complementary ways to state the same thing, but one may at times be more convenient to use than the other.

There are some simple rules to follow while using `<show>` and `<hide>`:
 * The only modes available for use are the ones provided by the `field/@localizable` attribute.
 * May have as many `<show>` or `<hide>` elemenets as we need, but any given _mode_ may appear *only once* i.e. in only one of the `<show>` or `<hide>` elements.

==== Show/Hide example ====

Above, the question _acronym_ field is shown to all in _view edit add_ modes, and hidden from all in _listing_ mode. Let's say we would like to adjust the _acronym_ field such that:
 # only the _Clerk_ and the _Owner_ may _set or change_ it;
 # we would like that in `listing` mode _all logged in users_ can see it;
 # but for _view_ mode we keep it as it is i.e. it is shown to all.
To achieve this, we could modify the field descriptor as follows: 
{{{
        <field name="acronym" displayable="view edit add listing" localizable="view edit add listing">
            <show modes="view" />
            <show modes="edit add" roles="bungeni.Clerk bungeni.Owner" />
            <hide modes="listing" roles="bungeni.Anonymous" />
        </field>
}}}


----
== Workflow  ==

<wiki:comment>
=== How to map documents/groups/membership workflow === 
=== How to configure documents/groups/membership workflow === 
</wiki:comment>

Every document type in Bungeni is _workflowed_, as mentioned above in the [#Documents Documents] section that also indicates how to *relate* a _workflow definition_ to a _type_. 

A definition of a workflow in Bungeni is an XML file that defines the following behavioral aspects of the type it "workflows": 
 * The _features_ enabled by the type, see [#Document_features Document features] section for the list of available features on parliamentary document types in Bungeni.
 * _All_ the _global permissions_, dedicated to the type, that are to be granted to the various _roles_ you have defined in your parliament.
 * _All_ the possible _states_ the type may be in, thoughout its life-cycle.
 * _All_ the _local permissions_, dedicated to the type, that are to be granted or denied _on the document instance_, to the various _roles_ we have defined in our parliament.  
 * _All_ the "paths" or _transitions_ we wish to allow from any state to another, along with other related information such as which _roles_ may execute the _transition_ or under what _condition_ should the transition be "made possible".

Here, just as indication of the various functions of a workflow XML definition, is a skeletal extract of a workflow definition for a _Motion_ document type: 

{{{
<workflow title="Motion Workflow" 
    description="A Motion"
    tags="draft private public approved ... terminal"
    >
    
    <!-- features -->
    <feature name="audit" enabled="true" />
    <feature ...
    
    <!-- global grants -->
    <grant permission="bungeni.motion.View" role="bungeni.Owner" />
    <grant ...

    <!-- states -->
    ...
    <state id="draft" ... ></state>
    <state id="redraft" title="Redraft" like_state="draft"
        note="document under review before resubmission"
        version="true">
        <deny permission="bungeni.motion.Delete" role="bungeni.Owner" />
    </state>
    <state id="submitted_signatories" ... ></state>
    ...

    <!-- transitions -->
    ...
    <transition title="Submit to Signatories"
        source="draft redraft"
        destination="submitted_signatories"
        condition="pi_has_signatories"
        roles="bungeni.Owner"
    />
    ...
    <transition title="Redraft"
        source="submitted_signatories"
        destination="redraft"
        condition="user_is_context_owner"
        roles="bungeni.Owner"
    />
    ...
}}}

Note that managing permissions for a type is the biggest and trickiest chore in managing a workflow. To help manage this arduous task, some tools and conventions are available:

 * We only grant _global_ grants (never _deny_) and if we have granted a permission globally (for all instances of this type) we may not again grant it (or deny it) _locally_ i.e. for this _instance_ within a given _state_.

 * To make local grants easier, you may make use of the `state/@like_state` attribute, as in the sample above for the `redraft` state, that simply "adopts" all the local permission grants/denies for the "liked state" (i.e. from `draft` in the sample here) and then simply declare only the _differences_.


----
== Workspaces ==

Every user who logs in to Bungeni has a workspace, where they may view, add and edit documents. In order to provide the user with a familiar environment, the workspace in Bungeni has been modeled to the interface provided by very much used email applications (e.g Gmail or Yahoo mail).
 
The workspace has 3 main sections: 
 # my documents - Here a user finds all the documents that he has created, edited or signed in the lifetime of the current parliament; 
 # documents under consideration - This section contains all the parliamentary documents currently been worked on by parliament, and viewable by other users .e. they are in states tagged "public" in the workflow configuration and not tagged as being in terminal state, that would mean that they have ended their parliamentary life; 
 # scheduling – Here is were you may schedule sittings of the plenary and committees. See section on scheduling for more info.


=== my documents section ===

The "my documents" section contains only those documents that the user has the permissions to add, view or edit e.g. in the case of the MP,  only the ones they have authored or signed, in the case of staff, only the documents that have been submitted to that department

The “my documents” section is structured in four tabs: 

  * draft - This tab contains all the documents that the user is currently working on that have not been submitted to anyone else
  * inbox - This tab contains all the documents that require attention from the user, eg. a question that requires clarification from an MP, etc.
  * sent - This tab contains documents that the user has worked on and are now in some non terminal stage of their work-flow
  * archive - Here you find all the parliamentary documents that have reached their terminal state in the current parliament.

=== How to configure workspaces === 

Every document type has a workspace configuration file in the workspace folder of the bungeni_custom folder.

The administrator needs to specify which workspace tabs a document in a certain state will appear in for the different users.

To customise a workspace you need to set:

|| attribute || example || note ||
|| state || clarification_required || The state of the document ||
|| tabs || inbox || The tabs the document should appear in ||
|| roles || bungeni.MP || The roles for which this config applies ||

Example

{{{
<state id="clarification_required">
  <tab id="inbox" roles="bungeni.Owner"/>
  <tab id="sent" roles="bungeni.Clerk"/>
</state>
}}}

The example above specifies that a document in the state "clarification_required" will appear in the inbox of the person who introduced it (bungeni.Owner) and in the sent folder of the clerk (bungeni.clerk).


----
== Notification  ==

Bungeni has a notifications system that can be configured to send out notifications to users on document workflow transitions. It is flexible, allowing for different methods to be used to send out notifications for example email or SMS.

The notifications system uses a message queue system called RabbitMQ to route and queue messages. When an event occurs in Bungeni that requires that someone be notified, a message is sent to the queue. Services such as email or SMS can then retrieve the message from the queue and send it to the intended recipient. Parliaments can build other applications that make use of the messages from the message queue such as Instant Messaging notifications e.g. Jabber, Social Media sites such as Facebook and Twitter and so on.


=== How to set up notifications === 

Every document type has a notifications configuration file in the notifications folder

{{{
    {MY_CUSTOM}/notifications/{TYPE_NAME}.xml
}}}

|| attribute || example || note ||
|| roles || bungeni.Clerk || All users with this role on the object will be notified ||
|| onstate || submitted || When the document reaches the states defined here, the users with the roles specified above will be notified ||

For example

{{{
    <notify roles="bungeni.Clerk " onstate="submitted"/>
    <notify roles="bungeni.Owner" onstate="received"/>
}}}

In the above example, members of the clerks office will be notified when the document is submitted and the person who owns the document will be notified once it is received by the Clerk's office

The email machinery in Bungeni uses the notifications system described above. 

The templates used for each document type are found in

{{{
    {MY_CUSTOM}/email/templates/{TYPE_NAME}.xml
}}}

The email subject and body templates are defined using ZPT, the template system used in Bungeni.

----
== Publications (agenda, agenda, minutes, reports) ==

=== Purpose ===
Bungeni provides a facility to generate reports e.g. agenda, minutes, document reports e.t.c.
This section will explain how you may customise the templates used to generate reports.

=== Scheduling (Calendar) Reports ===
Within scheduling, the reporting infrastructure provides a facility to produce documents out of the sittings within a certain period. Some typical use-cases include:
 * agenda and minutes of a specific sitting
 * a report of bills/questions e.t.c to be discussed in the coming month or other time-frame

Below is a screenshot of a report generation session.
The templates detailed below will appear as options on the report generation screen.
Adding or deleting templates (discussed below) will determine the options provided to generate reports within this context.

http://bungeni-portal.googlecode.com/svn/wiki/images/reporting-scheduling-generation-session.png

=== Document Reports ===
The different documents in Bungeni e.g. bill, questions, e.t.c can also be download as PDF/ODT.
Document templates for the particular *document type* will determine the formattting og the PDF/ODT output.
Below is a sample of a document download session for a question: 

http://bungeni-portal.googlecode.com/svn/wiki/images/reporting-documents-download.png

=== How to customise templates ===
The templates are based on XHTML with an additional set of tags to support inclusion of bungeni content into the final document.
Templates are stored in *bungeni_custom* under: */reporting/templates*

Those used in scheduling go into the *scheduling* directory whereas those used for document reports will be in *documents*.
Once templates are added within these directories they become available as options when generating reports.

=== Structure of Templates ===
Each template is structurally composedof a configuration, head and body sections.

Here is a simple sample of a structure for a template:

{{{
<html xml:lang="en" xmlns:br="http://bungeni.org/reports">
  <br:config>
    <title>One week of questions Questions</title>
    <length>1w</length>
    <language>en</language>
  </br:config>
  <head>
    <title>Weekly Questions</title>
  </head>
  <body>
    <p>A blank report</p>
   </body>
</html>
}}}

==== Configuration section ====
The configuration section sets metadata associated with the current report type:
{{{
  <br:config>
    <title>Questions of the Week</title>
    <length>1w</length>
    <language>en</language>
  </br:config>
}}}
===== Configuration Options =====
|| *Option* || *Sample* || *Description* ||
|| title || `<title>Questions of the week</title>` || This is the report title. It can be referenced within the body. It is also displayed in menus within Bungeni ||
|| length || `<length>1w/length>` || Period covered by the report starting from a selected date. In this case - One(1) week. *More on this below*. ||
|| language || `<language>fr</language>` || The language of the content in generated report ||
|| doctypes || `<doctypes>question</doctypes>` || A space separated list of document types for which this template may generate reports. ^a^ ||

^a^ `Please note that the doctypes configuration parameter has meaning only in the context of document templates.`

====== Configuring Report Length ======
This is the notation used to specify the period covered by a report (_*n*_ is a positive integer greater than _1_)
    # _n_*h* evaluates to n hours such that `1h` evaluates to one (1) hour
    # _n_*d* evaluates to n days such that `5d` evaluates to five (2) days
    # _n_*w* evaluates to n weeks such that `4w` evaluates to four (4) weeks
    # We can also use combinations of _w_, _d_, _h_ depending on requirements

Below are sample timespans that can be used to specify the period covered by a report.
|| *Length* || *Evaluates to* || *Equivalent hours notation* ||
|| 1h || 1 hour || _N/A_ ||
|| 3d || 3 days || 72h ||
|| 2d6h || 2 days and 6 hours || 54h ||
|| 2w || 2 weeks || 336h ||

==== Body Section ====
Below you can see a sample of the body section of a report and customizable attributes.

{{{
  <body> 
    <div id="report-content">
        <h1 class="heading" br:type="text" br:source="title"/>
        <div id="listing-body">
            <div br:type="listing" br:source="sittings">
                <h2 br:type="text" br:source="title"/>
                <h3>Questions</h3>
                <div class="questions">
                    <ul br:type="listing" br:source="questions">
                        <li br:type="text" br:source="title"/>
                    </ul>
                </div>
            </div>
        </div>
    </div>
   </body>
}}}

===== Configuration options ====

|| *Tag* || *Value* || *Description* || *Example* ||
|| br:type || text || Includes the specified context variable as text || Display the title of a document as plain text: <br/> `<div br:type="text" br:source="title"/>` || 
|| || html || Includes the specified context variable as HTML || Display the body of a document as html: <br/> `<div br:type="html" br:source="body_text"/>` ||
|| || link || Renders a link to with the link as the named *br:url* parameter || Display a link to a document uri with the dublin core title as link text: <br/> `<a br:type="link" br:url="uri" br:source="dc:title/>"` ||
|| || listing || Generates a list of items || Display the list of titles of questions included in the template: <br/> `<ul br:type="listing" br:source="questions">`<br/>`    <li br:type="text" br:source="dc:title"/>` <br/> `</ul>` ||
|| br:source || A named context variable || names of available context variables are determined from the object available to the current template tag || See [HowTo_CustomizeParliamentaryInformationManagement#Available_context_names] ||
|| br:condition || A named context variable || This attribute determines if the current tag should be rendered.<br/> Checks existense of a value for the named context variable. || This tag will only be rendered if there is a title <br/> `<span br:source="title" br:condition="title"/>` ||

===== Available context names =====
The documentation for the names available for use in reports can generated from within Bungeni's home folder.
Simply run this script:
{{{
    ./bin/reporting-documentation
}}}
This will generate a tree in HTML of these names indiside the {{{docs/reporting/}}} folder within Bungeni's home folder.
You can open this file in any browser to see the tree of available names that can be incorporated in a report template.

If you are running Bungeni in debug mode, the reporting documentation can also be accessed from this address in a default installation.

{{{
    http://localhost:8081/docs/reporting/
}}}

Below is an image showing the generated tree of names:

http://bungeni-portal.googlecode.com/svn/wiki/images/reporting-sample-doctree.png

`Note that in the case of document templates the names available are limited to the particular document section.`
`For instance in the case of a bill only the names under `bills` in the above figure would be available to the report template.`


----
== Layout, theme and formats == 
The layout, look and feel of the portal is controlled by a theme template in conjunction with a set of css styles and rule files. A default theme is enabled for each Bungeni installation.

=== How to create a theme ===

Bungeni comes with a default theme and layout. You can create your own themes inside the custom folder. (see [#The_customization_folder customization folder])

The theme folder should have the structure: 

{{{
name_of_theme/
├── css/
├── images/
└── layout.html
}}}

Copy _`css`_ and _`images`_ folders together with _`layout.html`_ file from the default Bungeni theme into your theme folder. The Bungeni theme is located at:

{{{
{BUNGENI_INSTALL_PATH}/portal/src/portal.theme/portal/theme/static/
}}}

  * see [HowTo_CustomizeParliamentaryInformationManagement#Changing_page_layout How to change page layout]
  * see [HowTo_CustomizeParliamentaryInformationManagement#Styling_with_CSS How to style with CSS]

=== Enabling a custom theme ===

To enable a country theme, edit the country_theme parameter in the Fabric 'setup.ini' file. The default setting is as follows:

{{{
[custom]
...
country_theme = default
}}}

Set this parameter to the appropriate value (_It is recommended to use the [http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2] codes_) e.g. for the Kenya theme the setting would be as follows:

{{{
[custom]
...
country_theme = ke
}}}

then run the following command in fabric


{{{
fab -H localhost enable_country_theme config_ini:portal 
}}}

Sample country themes exist at this location: http://bungeni-portal.googlecode.com/svn/portal.country_themes/trunk

=== Changing page layout ===   

The `layout.html` is an HTML file which defines the arrangement of HTML elements on both Portal and Workspace. It contains place-holder elements where to insert content from various Bungeni components. 

The image below shows screenshots of both portal and workspace areas on Bungeni.

http://bungeni-portal.googlecode.com/files/portal-and-workspace.png

Think of `layout.html` as a template document that defines where to insert content, say the search-form or main-navigation bar. The HTML attributes _`id`_ and _`class`_ are used to identify the elements where you will insert content. In the snippet below, the `portal-search` _id_ denotes the container element where the search-form will be inserted. 

{{{
<html>
  <head></head>
  <body>
   ...
   <!-- search -->
   <div id="portal-search"></div>
   ...
  </body>
</html>
}}}

=== Getting layout content ===

There are rules that match content elements with the corresponding layout's elements. The rule to insert content into the above element looks like this:

{{{
   <!-- search -->
   <append content="children:#portal-search" theme="children:#portal-search" />
}}}

This will insert all elements *from* _`content`_ *into* _`theme`_ without copying the `#portal-search` element itself.
The rules are defined in `rules.xml` file found in:

{{{
{BUNGENI_INSTALL_PATH}/portal/src/portal.theme/portal/theme/static/themes/
}}}

To apply CSS styling, see *Styling with CSS* section below.

=== Changing the Menu Order and Structure ===   

=== Styling with CSS  ===  

The CSS files for styling Bungeni are broken down into two files:

  * reset.css - Has styling properties that affect width, height and alignment of Bungeni.

  * skin.css - Cosmetic changes such as text-color, background-color, border, typography are done here. 

styling in both CSS files is split into four major sections:

  * GENERAL - Applies site-wide
  * TEMPLATE-PORTAL - Anonymous user-space or public view
  * TEMPLATE-WORKSPACE - Logged in area
  * TEMPLATE-PORTAL-EXIST - Public view from an XML repository

Denoted at the start by a comment banner. e.g. for TEMPLATE-PORTAL

{{{
...

/* =============================================================================
   TEMPLATE PORTAL - Styling applied on portal
   ========================================================================== */

.template-portal {
    background: #eeeeee !important;
}

.template-portal #header-wrapper {
    background: #434343;
    border-bottom: 10px solid #c1c1c0;
}

...
}}}

These are top-level class selector's found on the HTML `body` tag e.g. `<body class="template-portal">`

To increase width of the portal from the default `960px`.

_reset.css_ -> find `template-portal` top-level section and look under width sub-section

Similar process for change background-color albeit under the _skin.css_ file

=== Theming Bungeni using Skins ===  

Bungeni skins are located under the custom folder:

{{{
{BUNGENI_INSTALL_PATH}/src/bungeni_custom/ 
}}}


----
== How to setup a parliament ==

Once you have defined your documents/their workflows and related roles and permissions, you have added their vocabularies, etc. you are ready to set up your own parliament.

To have Bungeni up and running, like any other system there is need a minimum set of data in order to be fully functional. You need to basically add:
 * *authenticated users* that may have specific roles in the context of parliamentary workflow;
 * *groups* that in Bungeni terms could be _offices_, _committees_, _political groups_; even _parliament_ is a _group. Groups may have sub-groups, they have begin and end date, they have membership, and title specific to each group and they may also have addresses.

Basically setting up your parliament means to add the authenticated users, define the _offices_ that is the structural organization of your parliament, add a parliament, members of parliament, its committees and political groups, and also setup the Government with its Ministries and the titles used to define the memberships of the different groups.

When you login as Administrator in the _administration_ tab you will find these folders: parliaments, offices, users:
 * *parliaments* folder lists the _parliaments_, (e.g. 7th Parliament – 2009-2014). Within a parliament you will find all the documents, groups with memberships of that specific parliament;
 * *offices* folder lists the _office_ of the system. Here, depending of the actual organisation structure of your parliament you can create Departments, Services within them or Directorates and Office. Etc.
 * *users* folder list all users that are allowed an authenticated access the system e.g. Members of Parliament, Parliamentary staff, government Ministers and staff, etc.

*Step 1: _create a parliament_*
In {{{administration/parliaments}}} click _add parliament_:

http://bungeni-portal.googlecode.com/svn/wiki/images/add-parliament.png

*Step 2: _add users_*
In {{{administration/users}}} click: _add user_

All authenticated users, being Members of Parliament, Parliamentary staff, government Ministers or staff, etc. aas to first be added as Bungeni _users_. Here you may input all the biodata of the users, and if required, e.g. the the case of MPs, you may also add a biographical note. You may also add _addresses_ that the users may have, e.g. office, home, etc.

Step 3: add offices and memberships 

In administration/users click _add office_

All authenticated users, being Members of Parliament, Parliamentary staff, government Ministers or staff, etc. aas to first be added as Bungeni _users_. Here you may input all the biodata of the users, and if required, e.g. the the case of MPs, you may also add a biographical note. You may also add _addresses_ that the users may have, e.g. office, home, etc.

Step 4:  add _groups_, related memberships and titles

Within parliaments the different categories of information that may be need to setup the system are listed below.

 * *parliamentary sessions* Here you add parliamentary sessions;

 * *members of parliament* MP are registered uploaded here. Before one is added the group _member of parliament_ one has to be created as _user_;

 * *political groups* Add members of _political groups_. Only MP can be added to political groups;

 * *committees* Add members of _committees_. Only MP can be added to political groups;

 * *governments* Add _government/ministries/member of ministries_;

 * *title types* Add the title use in your parliament, e.g. Speaker/President/Chief Whip etc. Please note that _titles_ in all groups may be associated to a _role_ (see section on roles).
