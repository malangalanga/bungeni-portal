#summary How to customize parliamentary information management

<wiki:toc max_depth="5" />


----
== Overview ==

=== The customization folder === 

Bungeni packages the customization aspects of the system in a specific folder. 

Rather than start with no customization configuraitons, to make things easier, Bungeni comes packaged with a default customization folder which can be used as a basis for creating your own customizations. 

The system comes packaged with a default customization setup in 
the `src/bungeni_custom` folder within the `bungeni_apps/bungeni` folder.

The customization folder structure looks like this :
{{{
bungeni_custom/
├── forms
├── __init__.py
├── notifications
├── registry
├── reporting
├── sys
├── translations
├── vocabularies
├── workflows
└── workspace
}}}

This structure provides points of access to different aspects of customization discussed later in this document. The content of the folders is described below.

|| *file / folder name* || *purpose* ||
|| forms || contains the ui.xml file which is used to customize forms in Bungeni ||
|| notifications || contains the notification configuration files used for workflow notifications ||
|| registry || Contains the format for numbering content||
|| reporting || Contains the reporting templates in XHTML format ||
|| sys || Contains configuration files related to database connections, openoffice access and default roles in the system ||
|| translations || Contains the localized message strings in [http://www.gnu.org/savannah-checkouts/gnu/gettext/manual/html_node/PO-Files.html PO format] ||
|| vocabularies || Contains the different vocabularies used in the system in VDEX format ||
|| workflows || Contains the Workflow customization files. There is one file per document type ||
|| workspace || Contains the Workspace customization files. There is one file per document type||


*We don't recommend making customizations in the default customization folder, instead the system provides a mechanism to create and use your own customization folder. This kind of setup will allow you to test your customization against the reference customization implementation provided out of the box in Bungeni*.

=== Creating your own customization folder === 

Bungeni determines the customization folder to use on the basis of a `bungeni_custom.pth` customization path file.

This file can be found in the main bungeni installation folder `bungeni_apps/bungeni`.

The contents of this file simply indicate a folder where the system should look for the `bungeni_custom` package :

{{{
/home/undesa/bungeni_apps/bungeni/src
}}}

Changing the path here will tell bungeni to look for the customization folder in a different location.

=== Making a private customization folder ===

To create your own private customization folder do the following --

 * Create a copy of the `src/bungeni_custom` folder, and put it under `bungeni_apps/bungeni`, call it with a different name e.g. `my_custom`.
 * Edit the `bungeni_apps/bungeni/bungeni_custom.pth` file , and change the path in the file to :
	{{{
	/my/installation/path/bungeni_apps/bungeni
	}}}
    Where /my/installation/path is the folder under which the bungeni applications are installed.
  * Restart Bungeni and do a small test to verify if everything is working properly (e.g. login as a member and publish a question) 

Your customization folder tree should look like this under `/my/installation/path/bungeni_apps/bungeni`:
{{{
my_custom/
├── forms
├── __init__.py
├── notifications
├── registry
├── reporting
├── sys
├── translations
├── vocabularies
├── workflows
└── workspace
}}}

You can now start customizing workflows, vocabularies and workspaces in Bungeni in the `my_custom` folder.

=== Testing customizations ===


=== Best practices ===

 * You need to back up or better version control your customization folder since it isn't part of shipped bungeni source code. Which means if your server crashes for whatever reason and you have to reinstall and re-setup Bungeni, you will be able to restore the system and the default customisation since they are version controlled - but you won't be able to restore your own customizations unless you have your own backup.

 * Do Not make your customizations in the default `bungeni_custom` customization folder. This is intended only as a test customization setup and is version controlled and will recieve updates. Always use a private customization folder as specified aove.




----
== How to configure languages ==
=== Purpose ===
Here you can set the default launguage used in the Bungeni user interface as well as enable alternative languages.
If you have enabled more than one language, the default language (see below) will be used in the Bungeni user interface i.e. if the browser language is not one of the alternative languages.

=== How to enable and set the default language ===

Bungeni language configuration is managed in this file:
{{{
{BUNGENI_INSTALL_PATH}/src/bungeni_custom/__init__.py. 
}}}
The location of this file may be different if you have a custom configuration location. (See [HowTo_CustomizeParliamentaryInformationManagement#Using_the_customization_folder Using the customization folder])

The parameters in the table below will be found in this file and determine how languages are handled in Bungeni.

|| *Parameter (Sample)* || *Notes* ||
|| zope_i18n_allowed_languages = "ar en es es-do fr it nl pt ru sw tk" || A space separated string of language ids of available languages.<br/> To enable or disable language, add or remove its id from this list ||
|| _default_language = "en"_ || This is the default language used in the system. It should be one of those in `zope_i18n_allowed_languages`. ||
|| _right_to_left_languages = "ar"_ || This is a space separated list of language ids for which the user interface should be displayed right-to-left. <br/> These language ids must be a subset of `zope_i18n_allowed_languages` ||
|| _zope_i18n_compile_mo_files = True_ || Set this to True/False to turn on/off compiling of message catalogs into a binary format (faster). ||


Only enabled languages will show up in Bungeni's language menu. With the `zope_i18n_allowed_languages` setting above, this would be the resulting language menu.

http://bungeni-portal.googlecode.com/svn/wiki/images/languages-menu.png


----
== Vocabularies ==
=== Managing  vocabularies ===

----
== Roles ==

Roles in Bungeni are used to specify who has permission to perform different tasks. Roles can be seen as a collection of permissions, e.g. a role could be “clerk office”. Permissions are like keys to doors that open to a particular functionality. For example, we might need the permission to view a document while another role may need permission also to edit it, etc.
“Roles” are used to grant a specific set of permissions to group/s, that could be e.g. Member of Parliament, staff of the Clerk Office etc. User belonging to these groups will have the rights that that specific role has.

=== System roles - what they mean and default usage ===

There are a number of system roles that are defined in the system

|| *Role ID* || *Use* ||
|| bungeni.Owner || The owner of a document, ie. the person who creates/moves a document ||
|| bungeni.Signatory || Signatory of a document ||
|| bungeni.Admin || The bungeni administrator ||
|| bungeni.Authenticated || All authenticated users ||
|| bungeni.Anonymous || Bungeni Visitor ||
|| bungeni.MP || Member of parliament ||
|| bungeni.Minister || Minister ||
|| bungeni.PoliticalGroupMember || Political Group Member ||
|| bungeni.Government || Member of Government ||
|| bungeni.CommitteeMember || Committee Member ||

=== How to set up user defined roles ===

A Bungeni administrator may define additional parliament specific roles in bungeni_custom/sys/acl/roles.zcml. A role added here may then be associated with an office while adding an office.

|| *attribute* || *example* || *note* ||
|| title || Legal Department || The title "Legal Department" is what appears in the user interface ||
|| role || legalDepartment || This is the ID that will be used anywhere else in the system where a role may be specified e.g. the workspace configuration or the workflow configuration. || 

Example

{{{
<role title="Legal Department" role="legalDepartment">
}}}

To associate the role above with an office, in “administration” go to “offices” and add the “Legal Department”, then select it in the "roles select box” “Legal Department”. If the Department already exists, just edit and select the "roles" select box “Legal Department”.


==== Sub Roles ====

If you need to have finer grained roles you may use sub-roles e.g. If you want all staff in the Clerk Office to see all parliamentary documents, but only the “Question Office” staff to actually edit questions and move then in the workflow. Please note that with “sub role” you can only “add permission” not deny permission that have been granted in the “parent role”.

|| *attribute* || *example* || *note* ||
|| title || Bill Office || The title "Bill Office" is what appears in the UI ||
|| id || legalDepartment_billOffice ||This is the ID that will be used anywhere else in the system where a role may be specified e.g. the workspace configuration or the workflow configuration. ||
|| role || legalDepartment || This is the ID parent role ||


Example

{{{
<bungeni:subrole id="legalOffice_billOffice" title="Question Clerk" role="legalDepartment/>
}}}

The above example sets a new sub-role within the legalDepartment role. To associate this role with an office, in “administration” go to “offices” open the “Legal Department” and add  the “Bill Office” and then in the "roles select box” " select  “Bill Office”. Please note that the “Bill Office” sub-role will be available only within the parent “office”, in this case the Legal Department.



----
== Parliamentary Metadata ==
=== Adding a parliament ===
=== Adding Parliamentary entities ===
=== Committees ===
=== Groups ===
=== Government ===
=== Users ===
=== Offices ===



----
== Documents ==

=== Parliamentary document types ===

Bungeni provides rich support for a variety of *parliamentary document types* e.g. _Agenda Items_, _Bill_, _Motions_, _Questions_, _Tabled Documents_, with any number of other types being easily added.

All parliamentary document types are *workflowed*--with the workflow definition for any type being entirely customizable. Most other aspects of a document type definition are also customizable e.g. the various *user interface views* for the type, or what *features* does the type support. 

Note that, because all object types, parliamentary documents or not, supported by Bungeni are customizable in a consistent way, the explanations below will sometimes also mention or refer to other types than just the *parliamentary document types* listed above, for exmaple:
 # other _support_ document types e.g. _Events_ or _Attachments_;
 # other types that are _not_ parliamentary documents e.g. _Groups_ or _Sittings_.


=== Document _features_ ===

A document type may enable or disable a variety of *features*. When enabled for the document type, the feature is available for _each_ document of that type.

In each case, when a feature is enabled for a type, the system will also provide the necessary User Interface views for the feature e.g. if _audit_ is enabled for a type, then the UI will provide various ways to view the audit log of the document.

Here's a summary supported features for parliamentary documents:

 * *audit*: all changes on a document are _audited_.
 * *version*: a document may be _versioned_.
 * *attachment*: _attachments_ may be added to the document.
 * *event*: _events_ (a special kind of support document) may be added to the document.
 * *signatory*: the document life-cycle, defined by its workflow, requires that other members of parliament _sign_ the document.
 * *schedule*: the document may be included in _sitting agenda_.
 * *workspace*: the document is to be included in the private user's _workspace_.
 * *notification*: user may subscribe and receive a variety of _notifications_ as the document changes.
 * *download*: the document may be available for _download_ e.g. in PDF.

Enabling or disabling, and in some cases parametrizing, a feature for a type is part of the workflow definition for the _enabled_ type.

=== Enabling and disabling custom document types ===

The entry point to all type customization is the file:
{{{
    {BUNGENI_CUSTOM}/types.xml
}}}

A document type is simply enabled simply by including a {{{<doc>}}} element with the type name, and setting the attribute {{{@enabled="true"}}}. To disable, set the attribute {{{@enabled="false"}}} (or just remove the {{{<doc>}}} element): 

{{{
<types>
    <doc name="agenda_item" enabled="true" />
    <doc name="bill" enabled="true" />
    <doc name="motion" enabled="true" />
    <doc name="question" enabled="true" />
    <doc name="tabled_document" enabled="true" />
    ...
</types>
}}}

All custom document types must specify a name, that will be the _key_ used throughout the system to identify this type. 

As previously mentioned, all types are _workflowed_. By default, the workflow definition file for a type is expected to be at: 
{{{
    {BUNGENI_CUSTOM}/workflows/{TYPE_NAME}.xml
}}}
Similarly for other configuration aspects that have dedicated configuration files, namely {{{workspace}}} and {{{notification}}}.

Disabling a type means the type will *not* be registered (so will be _unknown_ to Bungeni), and all associated configuration e.g. workflow, descriptor, workspace, etc, will also not be loaded.

Group types and their memberships types are also set in a similar way. See the {{{{BUNGENI_CUSTOM}/types.xml}}} itself for further explanations and sample settings of these.

----
== Forms ==
=== How to localize forms === 
=== Form UI (workspace) === 
=== Changing display order of fields === 
=== Show/Hide fields on a Form per mode ===  


----
== Workflow  ==
=== How to map documents/groups/membership workflow === 
=== How to configure documents/groups/membership workflow === 









----
== Workspaces ==

Every user who logs in to Bungeni has a workspace, where they may view, add and edit documents. In order to provide the user with a familiar environment, the workspace in Bungeni has been modeled to the interface provided by very much used email applications (e.g Gmail or Yahoo mail).
 
The workspace has 3 main sections: 
 # my documents - Here a user finds all the documents that he has created, edited or signed in the lifetime of the current parliament; 
 # documents under consideration - This section contains all the parliamentary documents currently been worked on by parliament, and viewable by other users .e. they are in states tagged "public" in the workflow configuration and not tagged as being in terminal state, that would mean that they have ended their parliamentary life; 
 # scheduling – Here is were you may schedule sittings of the plenary and committees. See section on scheduling for more info.


=== my documents section ===

The "my documents" section contains only those documents that the user has the permissions to add, view or edit e.g. in the case of the MP,  only the ones they have authored or signed, in the case of staff, only the documents that have been submitted to that department

The “my documents” section is structured in four tabs: 

  * draft - This tab contains all the documents that the user is currently working on that have not been submitted to anyone else
  * inbox - This tab contains all the documents that require attention from the user, eg. a question that requires clarification from an MP, etc.
  * sent - This tab contains documents that the user has worked on and are now in some non terminal stage of their work-flow
  * archive - Here you find all the parliamentary documents that have reached their terminal state in the current parliament.

=== How to configure workspaces === 

Every document type has a workspace configuration file in the workspace folder of the bungeni_custom folder.

The administrator needs to specify which workspace tabs a document in a certain state will appear in for the different users.

To customise a workspace you need to set:

|| attribute || example || note ||
|| state || clarification_required || The state of the document ||
|| tabs || inbox || The tabs the document should appear in ||
|| roles || bungeni.MP || The roles for which this config applies ||

Example

{{{
<state id="clarification_required">
  <tab id="inbox" roles="bungeni.Owner"/>
  <tab id="sent" roles="bungeni.Clerk"/>
</state>
}}}

The example above specifies that a document in the state "clarification_required" will appear in the inbox of the person who introduced it (bungeni.Owner) and in the sent folder of the clerk (bungeni.clerk).


----
== Notification  ==

Bungeni has a notifications system that can be configured to send out notifications to users on document workflow transitions. It is flexible, allowing for different methods to be used to send out notifications for example email or SMS.

The notifications system uses a message queue system called RabbitMQ to route and queue messages. When an event occurs in Bungeni that requires that someone be notified, a message is sent to the queue. Services such as email or SMS can then retrieve the message from the queue and send it to the intended recipient. Parliaments can build other applications that make use of the messages from the message queue such as Instant Messaging notifications e.g. Jabber, Social Media sites such as Facebook and Twitter and so on.


=== How to set up notifications === 

Every document type has a notifications configuration file in the notifications folder

{{{
    {BUNGENI_CUSTOM}/notifications/{TYPE_NAME}.xml
}}}

|| attribute || example || note ||
|| roles || bungeni.Clerk || All users with this role on the object will be notified ||
|| onstate || submitted || When the document reaches the states defined here, the users with the roles specified above will be notified ||

For example

{{{
    <notify roles="bungeni.Clerk " onstate="submitted"/>
    <notify roles="bungeni.Owner" onstate="received"/>
}}}

In the above example, members of the clerks office will be notified when the document is submitted and the person who owns the document will be notified once it is received by the Clerk's office

The email machinery in Bungeni uses the notifications system described above. 

The templates used for each document type are found in

{{{
    {BUNGENI_CUSTOM}/email/templates/{TYPE_NAME}.xml
}}}

The email subject and body templates are defined using ZPT, the template system used in Bungeni.

----
== Publications (agenda, minutes, reports) ==
=== How to localise  agenda, minutes, reports ===
  * [XHTML_Report_Templates Writing Templates for Report Generation]



----
== Layout, theme and formats == 
The layout, look and feel of the portal is controlled by a theme template in conjunction with a set of css styles and rule files. A default theme is enabled for each Bungeni installation.

=== Enabling a country theme ===

Sample country themes exist at this location: http://bungeni-portal.googlecode.com/svn/portal.country_themes/trunk

To enable a country theme, edit the country_theme parameter in the Fabric 'setup.ini' file. The default setting is as follows:

{{{
[custom]
...
country_theme = default
}}}

Set this parameter to the appropriate value (_It is recommended to use the [http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2] codes_) e.g. for the Kenya theme the setting would be as follows:

{{{
[custom]
...
country_theme = ke
}}}

then run the following command in fabric


{{{
fab -H localhost enable_country_theme config_ini:portal 
}}}

=== Changing page layout ===   

Each country theme directory has a default structure:

{{{
|-- css
|-- images
`-- layout.html
}}}

The `layout.html` is an HTML file which defines the arrangement of HTML elements on both Portal and Workspace. It contains place-holder elements where to insert content from various Bungeni components. 

The image below shows screenshots of both portal and workspace areas on Bungeni.

http://bungeni-portal.googlecode.com/files/portal-and-workspace.png

Think of `layout.html` as a template document that defines where to insert content, say the search-form or main-navigation bar. The HTML attributes _`id`_ and _`class`_ are used to identify the elements where you will insert content. In the snippet below, the `portal-search` _id_ denotes the container element where the search-form will be inserted. 

{{{
<html>
  <head></head>
  <body>
   ...
   <!-- search -->
   <div id="portal-search"></div>
   ...
  </body>
</html>
}}}

There are rules that match content elements with the corresponding layout's elements. The rule to insert content into the above element looks like this:

{{{
   <!-- search -->
   <append content="children:#portal-search" theme="children:#portal-search" />
}}}

This will insert all elements *from* _`content`_ *into* _`theme`_ without copying the `#portal-search` element itself.
The rules are defined in `rules.xml` file found in:

{{{
{BUNGENI_INSTALL_PATH}/portal/src/portal.theme/portal/theme/static/themes/
}}}

To apply CSS styling, see *Styling with CSS* section below.

=== Changing the Menu Order and Structure ===   

=== Styling with CSS  ===  

The CSS files for styling Bungeni are broken down into two files:

  * reset.css - Has styling properties that affect width, height and alignment of Bungeni.

  * skin.css - Cosmetic changes such as text-color, background-color, border, typography are done here. 

styling in both CSS files is split into four major sections:

  * GENERAL - Applies site-wide
  * TEMPLATE-PORTAL - Anonymous user-space or public view
  * TEMPLATE-WORKSPACE - Logged in area
  * TEMPLATE-PORTAL-EXIST - Public view from an XML repository

Denoted at the start by a comment banner. e.g. for TEMPLATE-PORTAL

{{{
...

/* =============================================================================
   TEMPLATE PORTAL - Styling applied on portal
   ========================================================================== */

.template-portal {
    background: #eeeeee !important;
}

.template-portal #header-wrapper {
    background: #434343;
    border-bottom: 10px solid #c1c1c0;
}

...
}}}

These are top-level class selector's found on the HTML `body` tag e.g. `<body class="template-portal">`

To increase width of the portal from the default `960px`.

_reset.css_ -> find `template-portal` top-level section and look under width sub-section

Similar process for change background-color albeit under the _skin.css_ file

=== Theming Bungeni using Skins ===  

Bungeni skins are located under the custom folder:

{{{
{BUNGENI_INSTALL_PATH}/src/bungeni_custom/ 
}}}