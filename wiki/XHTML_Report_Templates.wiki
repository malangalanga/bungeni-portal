#summary Template writing guide for report generation templates

= Writing XHTML template for report generation =

<wiki:toc max-depth="3"/>

= Introduction = 
Bungeni provides a facility to generate reports within particular contexts.

This document primarily dwells on the definition of templates used to generate reports within scheduling(calendar and sittings) and in production of PDF^1^  , ODT^2^ and other formats for publication.

= Why =
While bungeni provides facilities to manage the parliamentary process, it cannot possibly meet the needs (changing or unknown) of every parliament. For this reason, we provide a facility to generate custom documents out of stored data.

= Contexts =
These are the sections within bungeni within which we can generate reports.
== Scheduling (Calendar) Context ==
Within scheduling, the reporting infrastructure provides a facility to produce documents out of the sittings within a certain period. Some typical use-cases include:
 * a report on bills to be discussed in the coming month.
 * a report on business for the week
 * a report on motions and questions scheduled within the past six months

==== Sample Report Generation Session (Scheduling) ====
Below is a screenshot of a report generation session.
The templates detailed below will appear as options on the report generation screen.

http://bungeni-portal.googlecode.com/svn/wiki/images/reporting-scheduling-generation-session.png

Adding or deleting templates will determine the options provided to generate reports within this context.

== Document Context ==
This allows customization the structure and composition of parliamentary documents generated in external formats such as PDF and ODT

Below is a sample of a document download session for a question. 
Document templates registered for the question *document type* will direct the PDF/ODT output.
See [XHTML_Report_Templates#Templates]

http://bungeni-portal.googlecode.com/svn/wiki/images/reporting-documents-download.png

= Templates =
The templates are based on XHTML with an additional set of tags to support inclusion of bungeni content into the final document.
Templates are stored in *bungeni_custom* under: */reporting/templates*

Those used in scheduling go into the *scheduling* directory whereas those used for document reports will be in *documents*.

Once templates are added within these directories they become available as options when generating reports.

= Writing Templates =
Here is a sample XHTML template applicable to scheduling:

This sample generates a blank report:
{{{
<html xml:lang="en" xmlns:br="http://bungeni.org/reports">
  <br:config>
    <title>One week of questions Questions</title>
    <length>1w</length>
    <language>en</language>
  </br:config>
  <head>
    <title>Weekly Questions</title>
  </head>
  <body>
    <p>A blank report</p>
   </body>
</html>
}}}

The same example now with content is shown below. This lists the questions scheduled on week following a date provided by the user.
{{{
<html xml:lang="en" xmlns:br="http://bungeni.org/reports">
  <br:config>
    <title>One week of questions Questions</title>
    <length>1w</length>
    <language>en</language>
  </br:config>
  <head>
    <title>Weekly Questions</title>
  </head>
  <body> 
    <div id="report-content">
        <h1 class="heading" br:type="text" br:source="title"/>
        <div id="listing-body">
            <div br:type="listing" br:source="sittings">
                <h2 br:type="text" br:source="title"/>
                <h3>Questions</h3>
                <div class="questions">
                    <ul br:type="listing" br:source="questions">
                        <li br:type="text" br:source="title"/>
                    </ul>
                </div>
            </div>
        </div>
    </div>
   </body>
</html>
}}}

== Breaking it down ==
The template is structurally composed of a configuration section i.e.:
{{{
<br:config></br:config>
}}}
and a content section (enclosed within the *body* tag)
=== Configuration ===
The configuration is a set of metadata associated with the current report type.
==== Configuration Options ====
|| *Option* || *Sample* || *Description* ||
|| title || `<title>All motions</title>` || This is the report title. It can be referenced within the body. ||
|| length || `<length>1m</length>` || Period covered by the report starting from a selected date. In this case - One(1) month. *More on this below*. ||
|| language || `<language>fr</language>` || The language of the content in generated report ||
|| doctypes || `<doctypes>question</doctypes>` || A space separated list of document types for which this template may generate reports. ||

* A note on doctypes configuration *
`Please note that the doctypes configuration parameter has meaning only in the context of document templates.`

===== Configuring Report Length =====
This is the notation used to specify the period covered by a report (_*n*_ is a positive integer greater than _1_)
    # _n_*h* evaluates to n hours such that `1h` evaluates to one (1) hour
    # _n_*d* evaluates to n days such that `5d` evaluates to five (2) days
    # _n_*w* evaluates to n weeks such that `4w` evaluates to four (4) weeks
    # We can also use combinations of _w_, _d_, _h_ depending on requirements

Below are sample timespans that can be used to specify the period covered by a report.
|| *Length* || *Evaluates to* || *Equivalent hours notation* ||
|| 1h || 1 hour || _N/A_ ||
|| 3d || 3 days || 72h ||
|| 2d6h || 2 days and 6 hours || 54h ||
|| 2w || 2 weeks || 336h ||

=== Content ===
The content section of a report can be customized within the `body` tags in the report template.

From the sample above, you will notice tags with the bungeni namespace. We use these tags to determine how content that node should be rendered. For instance, if we wanted to display the report title in a `h3` tag within the body of the document, this would suffice.
{{{
...
<body>
    <h3 br:type="text" br:source="title"/>
...
</body>
...
}}}
When the report is generated the content of this `h3` tag will be the report title configured in the `<br:config>` section of the template i.e.
{{{
...
<body>
    <h3>The Report Title in the Report Configuration</h3>
...
</body>
...
}}}

=== Including simple text ===
Generally the pattern is as shown above:
 # Set `br:type` attribute on the tag to `text`
 # Set `br:source` attribute on the tag to the *name of an available context variable*
   * Context names are extracted from the object that is available to the tag within the template (Discussed further below)

=== Including hyperlinks ===
To generate hyperlinks:
 # Set `br:type` attribute on the tag to `link`
 # Set `br:url` attribute on the tag to the name of the context variable whose value is a URL
 # ^*^Set `br:source` on the tag to a name of an available context variable. This is used as the text of the hyperlink tag.
^*^ Optional

Parliamentary documents have a URI property. Here is how a link to a question would work
{{{
<a br:type="link" br:url="uri" br:source="dc:title"/>
}}}

=== Including HTML ===
To include variables whose content is (X)HTML, we take an approach similar to `text` values i.e.
 # Set `br:type` attribute on the tag to `html`
 # Set `br:source` attribute on the tag to the name of the local variable whose value is the html
 
* Example (Including the body text of a parliamentary item) *
{{{
<div br:type="html" br:source="body_text"/>
}}}

=== Listings ===
We can also generate lists of items. To display a list of the titles of questions, include this in the template:
{{{
<ul br:type="listing" br:source="questions">
    <li br:type="text" br:source="dc:title"/>
<ul/>
}}}
The output of this template snippet should look something like this:
{{{
<ul>
    <li>Question#CD56 by Hon. Nambari Un</li>
    <li>Question#CD57 by Hon. Mjumbe Deux</li>
</ul>
}}}

==== A note about context variables in listings ====
From the listings example above, note that the context for the `ul` tag is the object containing the `questions` attribute.
In our case, this is a group`sitting`.

Similarly the context of the `li` tag is a question from the list of `questions`.
As a result `dc:title` refers to the dublin core title of the current question.

Below is an annotated image showing the context variables (in yellow) applicable in our
sample report template. The `br:source` value at that point is picked from the context variable.

http://bungeni-portal.googlecode.com/svn/wiki/images/annotated-report-contexts.png

= What are the available context names =
The documentation for the names available for use in reports can generated from within Bungeni's home folder.
Simply run this script:
{{{
    ./bin/reporting-documentation
}}}
This will generate a tree in HTML of these names indiside the {{{docs/reporting/}}} folder within Bungeni's home folder.
You can open this file in any browser to see the tree of available names that can be incorporated in a report template.

If you are running Bungeni in debug mode, the reporting documentation can also be accessed from this address in a default installation.

{{{
    http://localhost:8081/docs/reporting/
}}}

Below is an image showing the generated tree of names:

http://bungeni-portal.googlecode.com/svn/wiki/images/reporting-sample-doctree.png

`Note that in the case of document templates the names available are limited to the particular document section.`
`For instance in the case of a bill only the names under `bills` in the above figure would be available to the report template.`

= Notes =
^1^ Portable Document Format

^2^ Open Document Text
