#summary Bungeni Source Code Style Guide
#labels Phase-Implementation
#sidebar TableOfContents

= Bungeni Source Code Style Guide =

Recommendations for Bungeni source code style, 
with the aim of enhancing source code *read*-ability, *grep*-ability and *print*-ability and consequently, _understand_-ability, _debug_-ability, _test_-ability, _maintain_-ability, etc.

However, if conforming to these source style recommendations 
reduces any of the above code qualities in any way then conformance 
*should not* be adhered to -- use your good judgement instead.

----

== General - All Formats ==

Guidelines that apply to all project source code, irrespective of format e.g.
`.py`, `.xml`, `.zcml`, `.js`, `.css`, etc. 

=== Editing tools ===

Only tools that do *not automatically modify* source code format in any way may be used! 

This means you *may not* use any tool that does _any kind of source reformatting_. As an example, you *may not* use tools like _oXygen XML Editor_ that may auto-reformat whitespace as well may change the order of an XML element's attributes. In general, what you want to have is a good text editor.


=== Indentation and line length ===

Use 4 spaces per indentation level.

Limit all lines to a maximum of 79 characters. 


=== Quote characters ===

Prefer the double-quote `"` instead of the single-quote `'` character, whenever you have the choice.


=== Consistence of attribute/parameter order ===

In some languages the order or parameters is (sometimes) relevant e.g. in python, but in other languages such an order is not relevant e.g. attributes in XML. Whenever an equivalent list of attributes or parameters are present (be it as a list of XML attributes, or as the signature of a python callable) then the order should be consistent between the two languages. 

For the cases when there is such an order to respect, the order should be clearly commented in appropriate places in the source itself.


=== _Revisit_ Comments ===

Use _Revisit_ comments for code that is temporary, a short-term solution to be reworked, or for code on which there is still questions to be resolved or understood.

A _Revisit_ comments should have a: 
 * `!+` : must explicitly start with these 2 characters
 * _label_ : for easier grepping, and to be able to relate multiple comments in different places (by giving them the same label)
 * _author identifier_ : so others know who to follow-up with if needed
 * _date_ : so it is easier to judge relevance and status at a later time
 * _description_ : should also indicate what conditions/events would render the comment obsolete.
 
Authoring a _revisit_ comment is *not* a commitment to revisit it yourself. 

These pieces of information should be formatted in the following way:
{{{
    !+LABEL(author, date) description...
}}}
And should be specified in a comment as per the source format i.e. any of python, XML, doctest text files, HTML templates, css, js, etc. 

As example, here are 2 related _revisit_ comments in different ZCML files:

`models/configure.zcml`
{{{
<!-- !+CONSTITUENCY-Issue666(mr, 23-Jul-2010)
why is the include="domain.zcml" above commented?
-->
}}}
`models/permissions.zcml`
{{{
<!-- !+CONSTITUENCY-Issue666(mr, 23-Jul-2010)
The grant below is a temporary workaround to the problem that,
when NOT logged in, clicking on a consituency (below archive/ )
to view it would result in the following error:

<class 'zope.security.interfaces.Unauthorized'>:
(<zope.app.publisher.browser.viewmeta.DisplayForm object at 0xb717c8c>, 'browserDefault', 'zope.View')

For some reason, this is not needed for any other object -:- this should
be removed when it is understood why bungeni.Anybody does not get
zope.View on domain.Constituency type, as for other anonymously visible
domain types.
-->
<grant permission="bungeni.constituency.View" role="bungeni.Anybody" />
}}}


=== Naming ===

==== Permissions ====

All permission names should have the form:
{{{
    bungeni.{object[ .subobject ]}.{Action}
}}}
where :
 # _object_ is a *noun* indicating the target type of object (all lowercase, may optionally have additional dot-separated subtypes).
 # _Action_ is a *verb* indicating the the target action (capitalized). 

==== Workflows: States and Transitions ====

Workflow state/transition names:
 # State name should be a lowercase *adverb* (more or less) that describes the _condition_ an object is in, given the transition trail of the object.
 # Transition name should be a lowercase *verb*.
 # State/Transition multiple-word names are `_` (underscore) separated--in particular the `-` (hyphen) should *not* be used as separator as this character, besides being invalid as part of a python name, has special meaning within `ore.workflow`.
 # A bungeni _role_ name should *never* be part of a state/transition name.
 # A state and a transition within a same workflow should never have a same name--because in an XML document all element IDs should be unique, and Bungeni defines each workflow as one XML document (containing `<state>` and `<transition>` elements where the `id` attribute of each is respectively the state and transition name). 
 
Additionally, each individual workflow transition (*except* for _Create_ transition actions) must have a *dedicated* permission, that is named as follows:
{{{
    bungeni.{object}.wf.{transition}
}}}
The _Create_ class of transitions is an exception to this rule because such transitions have an _automatic_ trigger resulting from the act of creating the object, that presumably is already access-controlled with a `bungeni.{object}.Add` type permission. Because of this, all _Create_ transitions must have *no permission specified*.


----

== Python ==

All Bungeni python source code should follow these style rules. 

For any styling issue not explicitly specified here, heed the recommendations 
of the following Python Style Guides: 

 * [http://www.python.org/dev/peps/pep-0008/ PEP 8 - Style Guide for Python Code]<br/>Regarding this one you may find the following tools useful:
   * [http://pypi.python.org/pypi/pep8/ pep8 checker tool] 
   * [http://pypi.python.org/pypi/PythonTidy/ PythonTidy] 

 * [http://google-styleguide.googlecode.com/svn/trunk/pyguide.html Google Python Style Guide]<br/>In particular, the recommendations pertaining to:
   * [http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Imports Imports]
   * [http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Packages Packages]
   * [http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Nested/Local/Inner_Classes_and_Functions Nested/Local/Inner Classes and Functions]
   * [http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Comments Comments]

=== Quote characters ===

Always use a single double-quote char `"` to delineate a short literal string. 
Only use single-quote `'` when the literal string itself contains *double-quote*
characters that would otherwise require explicit escaping. 

Always use triple double-quote chars `"""` to delineate a multi-line string.
Only use triple single-quotes `'''` when the literal string contains itself 
*triple double-quote* characters that would otherwise require explicit escaping. 

The use of triple single-quotes `'''` should be reserved only to 
*temporarily comment out* entire code sections.

For long string that should not include any additional whitespace as a result 
of pretty source formatting should use the auto-concatenation feature of 
adjacent strings e.g. (preferably):
{{{
    long_string = "some text as part of a sible line string " \
                  "more text for the same string "
}}}
or:
{{{
    long_string = ("some text as part of a sible line string "
                   "more text for the same string")
}}}
but not:
{{{
    long_string = ("some text as part of a sible line string " +
                   "more text for the same string")
}}}

==== Quoting _inlined source code_ strings ====

Always delineate embedded code with triple double-quote chars `"""` -- even if the string is not multi-line. Example, here's a snippet of inlined SQL:
{{{
        rdb.CheckConstraint("""active_p in ('A', 'I', 'D')"""),
}}}

=== Multi-line parameter lists, literal lists and objects ===

 * The closing parenthesis, brace or bracket should be directly below the beginning of the opening symbol.
 * Continuation lines should be indented as per their nesting level i.e. 4 spaces per depth level implied by an open parenthesis, brace, bracket or any other way.
 * Only use multiple lines when a single line (of max 79 chars) is not sufficient.
 * Always include the most _key_ of parameters on the opening line.

Some examples: 
{{{
    columns = [
        rdb.Column("version_id", rdb.Integer, primary_key=True),
        rdb.Column("content_id", rdb.Integer, rdb.ForeignKey(table.c[fk_id])),
        rdb.Column("change_id", rdb.Integer, 
            rdb.ForeignKey("%s_changes.change_id" % entity_name)
        ),
        rdb.Column("manual", rdb.Boolean, nullable=False, default=False),
    ]
}}}

{{{
mapper(domain.User, schema.users,
    properties={"user_addresses": relation(domain.UserAddress)}
)
}}}

{{{
mapper(domain.QuestionVersion, schema.question_versions,
    properties={
        "change": relation(domain.QuestionChange, uselist=False),
        "head": relation(domain.Question, uselist=False),
        "attached_files": relation(domain.AttachedFileVersion,
            primaryjoin=rdb.and_(
                schema.question_versions.c.content_id ==
                    schema.attached_file_versions.c.item_id,
                schema.question_versions.c.version_id ==
                    schema.attached_file_versions.c.file_version_id
            ),
            foreign_keys=[schema.attached_file_versions.c.item_id,
                schema.attached_file_versions.c.file_version_id
            ]
        ),
    }
)
}}}

=== Multiple forms for same -- adopt and use one ===

==== Comparison operators ====

Always use `!=` and not `<>` (that is equivalent). 

----

== XML / ZCML ==


=== Blank lines ===

No blank lines -- only use a single blank line between elements on the uncommon occasion when those elements are completely unrelated to each other.


=== Multi-line elements ===

Empty XML elements should have the `/>` ending:
 * either on same single line as the opening tag
 * or at exactly same indent as opening tag
For example:
{{{
    <browser:menu id="admin_navigation" title="Actions Admin" />
    <browser:menuItem menu="admin_navigation"
        for="bungeni.models.interfaces.IBungeniApplication"
        title="Application Settings"
        action="settings"
        layer=".interfaces.IAdministratorWorkspace"
        permission="zope.ManageSite"
    />
}}}

When an element has a clear _key_ attribute -- 
i.e. the one most obvious attribute by which the element could be identified 
or grouped e.g. the `id` or `name` attribute, the `menu` attribute 
for `<menuItem>` elements, etc. -- 
it should be specified first and on same line as opening tag.
For example:
{{{
    <adapter factory=".workspace.WorkspaceContainerTraverser"
        permission="zope.Public"
        trusted="true"
    />
}}}



<wiki:comment>

formatting multi-line pre-block statements e.g:

            if (IChoice.providedBy(field) and field.required and
                field.default is None
                ):

style for multi-line def parameter declarations

</wiki:comment>

