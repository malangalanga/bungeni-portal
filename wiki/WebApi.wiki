#summary Web API
#sidebar TableOfContents

= Web Application Programming Interface (API) for Bungeni =

A web service to enable other applications to interface with Bungeni data and metadata in a formalized way.  The interface describes a collection of services (resources and corresponding methods) that are accessible over a network.

Applications that can interface with the API:

  * Third party applications that are customized and provided with Bungeni e.g the Plone CMS 
  * Client third party applications - A client implementing Bungeni may want to integrate its own applications with Bungeni.
  * Bungeni itself – New views could be developed based on the API services.

The API will provide a unifying interaction model so that such application integration can be done with a common approach and using a common infrastructure. This will reduce tight coupling of Bungeni to other applications. The API will facilitate the ability of external applications to perform these actions by exposing the user object as a resource as well as methods to retrieve, update (modify or delete where applicable) these user attributes.

==Conceptual Requirements==

The API will expose a set of services (resources and their representations as well as the methods available on each resource). Resources may map to objects or object collections in the Bungeni system. Internal implementation details of the Bungeni application should not leak into the API so as to decouple as much as possible the resource representations from the Bungeni application.

==Design constraints==
This will be a RESTful api accessible via the HTTP protocol

===Resources===
A resource maps directly to an object. Resources can be grouped into collections. Each collection will be homogeneous.Collections can exist globally, at the top level of the API; they can also be contained inside a single resource in which case they are sub-collections.

===Resource Data===
Each call to the API will result in a response containing data (application) and metdata (information that is specific to the RESTful API e.g URLs and relationships). The data response format should standardize to json or xml output. This does not constrain from the service providing both or more data formats. Standard HTTP response codes must also be used with each response.

====Resource Representation - JSON====
    * Data associated with a resource is modeled as key:value pairs on the JSON object.
    * The values of key:value pairs use any of the JSON data types of string, number, true, false, null, or arrays. Values can also be objects, in which case this is modeling nested resources.
    * Collections are modeled as an array of objects.
    * It may be necessary to have a special identifier for the type of the resource.

====Resource Representation - XML====
    * Resources are mapped to XML elements with a tag name equal to the resource type.
    * Attributes of resources are mapped to XML child elements with the tag name equal to the attribute name.

===Inputs and Outputs===
The API will allow reading and posting of data. This will be determined on a case-by-case review of each service developed for the API. Explicit input/output limitations should be imposed - messages going in or out of the API should be explicitly capped.

===Entry point====
There should be one entry point to the API and information contained here would include:
    * listing of top level collections and resources;
    * version information;

===Methods===
Methods will be executed on resources via their URL. The standard RESTful methods should be used to execeute operations on resources where such operations are implemented. Methods suggested to use are as follows:
    * View
    * Add
    * Edit
    * List
    * Transit

===Url Structure===
Each resource and collection should have a unique url. Links will be generated by the API.A convention to adopt would be to use collection/resource path segments relative to the API entry point together with the relevant method names.. Resources should be accessed via their object id.

e.g.
/api - the entry point to the api;
/api/user/list -  collection of users;
/api/user/view/id -  the resource “id” inside collection “user”

=== Service Contract ===
This will document with examples the different services provided by the API and how to access them. This will include:
    * The different services and their names;
    * How each service is invoked;
    * The signature for each method in a service;
    * Description of the parameters in a method.

=== Versioning and Deprecation ===

The API may change as new features and services are added to Bungeni. To prevent breakages occurring for clients already using the API and to cater for the addition of new features the API needs to be versioned. 

A deprecation mechanism will be necessary to act as guide for migrating between different versions.


=== Authentication ===
Access to the API may need to be controlled, only authenticated users should be able to request certain services. A validation mechanism will need to implemented.


=== Documentation ===
Should cover the following:
  * Definition of all resources, methods and their parameters
  * Sample request/response data formats for each action in the service
  * Documentation of error scenarios along with Server side status codes
  
==Use Cases for the API==

====User Management==== 
Object type: User

Operations required/possible: 

    * Add user;
    * View user - returns a single user
    * List users - returns all users ; 
    * Edit user - Updates one or more of a user's attributes e.g can be used to reset a user's password; 
    * Transit user - This can be used to deactivate and reactivate a user;
    * Delete user;
    * List user group memberships;? 
    * List user addresses;?
    * List user delegations?

A Bungeni user object has several attributes:
At a minimum the user object should have the following attributes:

    * salutation;
    * first_name;
    * last_name;
    * email;
    * login;
    * password;
    * gender;
    * date of birth;
    * country of birth;
    * nationality at birth;
    * current nationality
    * language;
 
The user also has a unique ID.

== User Profile == 
The user profile (issue 690) consists of a user's identification attributes (name, login) and any additional attributes stored about the user. 
The user is able to modify some aspects of his/her user profile. e.g. current_nationality, password, description, image etc.
?A user's group memberships, user addresses may be considered part of the user profile.?
In this case to update a user profile the following operations may be used:
    * Edit user;
To view the user profile the following operations may be used:
    * View user;
    * List user group memberships;
    * List user addresses;
    * List user delegations
 