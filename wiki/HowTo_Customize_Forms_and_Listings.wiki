#summary How to Customize forms and listings
#labels bungeni-wiki

<wiki:toc max_depth="4" />

= Introduction =

Bungeni forms and listings can be customized using an xml configuration file. This page documents how to customize the listings

= ui.xml =

The main access point to customize forms and listings is the ui.xml file.

This file can be found within the bungeni customization folder in a folder called forms.

i.e. if your bungeni customization folder is in `src/bungeni_custom` - then this file can be found under `src/bungeni_custom/forms/ui.xml`.

All the information in ui.xml is contained within the `<ui>` element.

{{{
<ui roles="bungeni.Clerk bungeni.Speaker bungeni.MP bungeni.Minister bungeni.Anonymous">
.....
<descriptor ....>
....
</ui>
}}}

The `<ui>` element defines a `@roles` attribute :
{{{
<ui roles="bungeni.Clerk bungeni.Speaker bungeni.MP bungeni.Minister bungeni.Anonymous"  >
....
}}}

*This `ui/@roles` attribute is purely for reference purposes and cannot be modified.*


== Forms == 

Forms in Bungeni are used to add, view or edit Bungeni content. 

In the ui.xml file all the forms are defined within the `<ui>` element.

e.g.
{{{
<ui roles="bungeni.Clerk bungeni.Speaker bungeni.MP bungeni.Minister bungeni.Anonymous">

    <descriptor name="AgendaItem">
        <field name="parliament_id" displayable="view listing" localizable="view listing">
            <hide modes="view listing" />
        </field>
    ......
    </descriptor>

    <descriptor name="Question">
        <field name="parliament_id" displayable="view listing" localizable="view listing">
            <hide modes="view listing" />
        </field>
    ......
    </descriptor>

</ui>

}}}

A Form in bungeni is called a *descriptor*, and is contained by the `<descriptor>` element.

The `<descriptor>` has a name attribute:

{{{

<descriptor name="Question >
...
</descriptor>
}}}

This `descriptor/@name` attribute identifies the name of the Form.


== Form Modes == 

Bungeni forms support presenting content in four different modes :

 * *add* - When new content is being added. e.g. if a member of parliament is adding a new question.
 * *edit* - When existing content is being edited . e.g. if a clerk is editing a question submitted by a Member of parliament.
 * *view* - When existing content is being viewed. e.g. if a public user is viewing a question on Bungeni.
 * *listing* - This mode is used when listing the content. e.g. if you go into the the page listing all the questions in the system, the question is dispalyed in the list based on the rules defined for this mode.


== Form Fields ==

Fields on a form are identified by the `<field>` element.

Below are some of the fields in a *Question* form.

{{{
    <descriptor name="Question">
        <field name="parliament_id" displayable="view listing" localizable="view listing">
            <hide modes="view listing" />   <=== parliament id field
        </field>
        <field name="short_name" displayable="view edit add listing" localizable="view edit listing">
            <show modes="view edit listing" /> <=== short name field
        </field>
        <field name="full_name" displayable="view edit add" localizable="view edit add">
            <show modes="view edit add" /> <== full name field 
        </field>
        <field name="registry_number" displayable="view edit listing" localizable="view edit listing">
            <show modes="view" />
            <hide modes="edit listing" /> <=== registry number
        </field>
        ......
    </descriptor>
}}}

Each of these corresponds to a field on a Question form :

[http://bungeni-portal.googlecode.com/files/add_question.png]

The behavior of form fields is controllable via a combination of roles and [#Form_modes modes].

The `<field>` element has the following attributes :

 * _name_ - the `field/@name' attribute identifies the name of the field. *You are not allowed to change the name of the field* :
          {{{
           ..
           <field name="parliament_id" ... 
          }}}
 * _displayable_ - the `field/@displayable` attribute identifies in which [#Form_modes modes] the field *MAY* be localizable. *You are NOT allowed to change the values in  displayable*
 * _localizable_ - the `field/@localizable` attribute identifies the actual modes in which [#Form_modes modes] the field *CAN* be localizable. This is always a sub-set of modes listed in `field/@displayable`. *You are NOT allowed to change the modes listed as `localizable`.* 
 
Let us explain the difference between `field/@displayable` and `field/@localizable` using an example :

The following states that the `registry_number` field *MAY* be localized in "view edit listing" modes ; and it *CAN* be localized also in "view edit listing" modes.

{{{
        <field name="registry_number" 
        displayable="view edit listing"  <<-- modes that MAY be localized
        localizable="view edit listing"  <<-- modes that CAN be localized
        >
}}}

The following states that the `registry_number` field *MAY* be localized in "view edit listing" modes ; and it *CAN* be localized *only* "view" mode.

{{{
        <field name="registry_number" 
            displayable="view edit listing" <<-- modes that MAY be localized
            localizable="view"              <<-- modes that CAN be localized
            >
}}}



== Field Customization == 

Fields are customized using `<show>` and `<hide>` specifed within a `<field>` element.
These are the *ONLY* part of the Forms xml configuration which is editable by the user.

`<show>` and `<hide>` do exactly what they are named as, `<show>` shows the field for the listed modes and roles , and `<hide>` hides the field for the listed modes and roles.

Both these elements have the following attributes that allow customization of the field behavior :

 * *modes* - lists the modes that are to be shown or hidden. The only modes allowed here are the ones listed in the `field/@localizable` attribute.
 * *roles* - lists the roles for which the modes are to be shown or hidden. The only roles allowed here are the ones listed in the `ui/@roles` attribute.

There are some simple rules to follow while using `<show>` and `<hide>` :
 * The only modes available for use are the ones provided by the `field/@localizable` attribute.
 * A mode appearing in `<show>` cannot also appear in `<hide>` and vice versa

The usage of `<show>` and `<hide>` is explained below, via examples -- 

The following hides the `owner_id` field in "view listing" modes for the "bungeni.Anonymous" user.

{{{
        <field name="owner_id" displayable="view edit add listing" localizable="view listing">
            <hide modes="view listing" roles="bungeni.Anonymous" />
        </field>
}}}


The following hides the `owner_id` field in "listing" mode for the "bungeni.Anonymous" user ; and makes the field available in "view" mode for all users (including "bungeni.Anonymous" ).

{{{
        <field name="owner_id" displayable="view edit add listing" localizable="view listing">
            <hide modes="listing" roles="bungeni.Anonymous" />
            <show modes="view" />
        </field>
}}}

The following is incorrect, because "listing" appears in both the `<show>` and `<hide>` modes.

{{{
        <field name="owner_id" displayable="view edit add listing" localizable="view listing">
            <hide modes="listing" roles="bungeni.Anonymous" />
            <show modes="view listing" />
        </field>
}}}

The following hides the `owner_id` field in "listing" mode for the "bungeni.Anonymous" user ; and makes it visible in "view" mode *only* for users with the "bungeni.Clerk" role.

{{{
        <field name="owner_id" displayable="view edit add listing" localizable="view listing">
            <hide modes="listing" roles="bungeni.Anonymous" />
            <show modes="view" roles="bungeni.Clerk" />
        </field>
}}}

== Field order Customization ==

The order in which the fields are presented on a form can be customized by changing the order of fields within a descriptor. Changing the order of fields will be applicable to all modes.

For example, the `registry_number` below appears after the `short_name` :

{{{
  <descriptor name="Question">
        <field name="parliament_id" displayable="view listing" localizable="view listing">
            <hide modes="view listing" />
        </field>
        <field name="short_name" displayable="view edit add listing" localizable="view edit listing">
            <show modes="view edit listing" />
        </field>
        <field name="full_name" displayable="view edit add" localizable="view edit add">
            <show modes="view edit add" />
        </field>
        <field name="registry_number" displayable="view edit listing" localizable="view edit listing">
            <show modes="view" />
            <hide modes="edit listing" />
        </field>
     .....
  </descriptor>
}}}

The registry_number field was moved up to be the first field on the form -- 
{{{
  <descriptor name="Question">
       <!-- registry_number below was moved up to be the first field -->
        <field name="registry_number" displayable="view edit listing" localizable="view edit listing">
            <show modes="view" />
            <hide modes="edit listing" />
        </field>
        <field name="parliament_id" displayable="view listing" localizable="view listing">
            <hide modes="view listing" />
        </field>
        <field name="short_name" displayable="view edit add listing" localizable="view edit listing">
            <show modes="view edit listing" />
        </field>
        <field name="full_name" displayable="view edit add" localizable="view edit add">
            <show modes="view edit add" />
        </field>
     .....
  </descriptor>
}}}

Henceforth, the `registry_number` field is always displayed first on the form.

== Examples of show/hide combinations == 

For a field described like this :

{{{
     <field name="owner_id" displayable="view edit add listing" localizable="view listing">
            <hide modes="listing" roles="bungeni.Anonymous" />
            <show modes="view" roles="bungeni.Clerk" />
        </field>
}}}

The following are some examples of show/hide combinations :

 * Hide in listing mode for anonymous ; Show in view mode for Clerk :
{{{
    <hide modes="listing" roles="bungeni.Anonymous" />
    <show modes="view" roles="bungeni.Clerk" />
}}}

 * Hide in ALL modes for anonymous ; Show in view mode for Clerk :
{{{
    <hide roles="bungeni.Anonymous" />
    <show modes="view" roles="bungeni.Clerk" />
}}}

 * Hide in ALL modes for anonymous ; Show in view mode for Clerk :
{{{
    <hide roles="bungeni.Anonymous" />
    <show modes="view" roles="bungeni.Clerk" />
}}}

 * This is INCORRECT - it states hide in ALL modes for MP, but show in Edit for all Roles :
{{{
    <hide roles="bungeni.MP" />
    <show modes="edit" />
}}} 
This is like stating :
{{{
    <hide modes="view edit add listing" roles="bungeni.MP" />
    <show modes="edit" />
}}} 

 * This is INCORRECT - it states hide in ALL modes for MP, but show in Edit for all Roles :
{{{
    <hide roles="bungeni.MP" />
    <show roles="bungeni.Clerk" />
}}}
This is like stating :
{{{
    <hide modes="view edit add listing" roles="bungeni.MP" />
    <show modes="view edit add listing" roles="bungeni.Clerk" />
}}} 


== Restoring ui.xml == 

It is good practice to make a backup copy of ui.xml whenever you edit it.

However, you can also regenerate ui.xml to its original state by running :

{{{
./bin/form-xml-restore 
}}}

from the buildout folder. This will regenerate the ui.xml from the source code definition of the forms.