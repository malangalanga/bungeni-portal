#summary How to Generate i18n catalogs.
#labels zope,Phase-Implementation
#sidebar TableOfContents

= Introduction = 

Bungeni specific i18n catalogs are used by the following packages within the bungeni egg :

 * bungeni.core
 * bungeni.ui
 * bungeni.core 

The paths for the message files within the bungeni egg are as follows 

 * bungeni/core/locales 
 * bungeni/ui/locales
 * bungeni/models/locales

Within the locales folder there is a .pot (a message template) file for the specific page named using the package name : bungeni.core.pot, bungeni.ui.pot, bungeni.models.pot as the case may be.

Message files (.po files) for specific languages are stored within the locales/LC_MESSAGES folder for each package. 


= How to generate a POT file =

POT files are generated using the i18nextract script in the buildout bin folder.

due to a minor issue in one of the recipes used in buildout, we need to modify the generated i18n scripts to include the path to our xapian library.

so after running buildout you'll need to add an additional 

 '$buildout_directory/parts/xapian/lib/python' 

to the list at the top of the bin/i18nextract script, substituting the full path for $buildout_directory. after which you can use the i18nextract script to generate a message catalog (pot file) for translation.


replace the lines 
{{{
import lovely.recipe.i18n.i18nextract

if __name__ == '__main__':
    lovely.recipe.i18n.i18nextract.main(['i18nextract', '-d', 'bungeni', '-s', '/home/undesa/devel/svn/bungeni-portal/parts/i18n/configure.zcml', '-p', 'src/bungeni.core', '-o', 'locales'])
}}}

with
{{{
import lovely.recipe.i18n.i18nextract
import sys, os

import getopt

argv = sys.argv[1:]

try:                                
    opts, args = getopt.getopt(argv, "p:d:", ["path=", "domain="])
except getopt.GetoptError:          
    usage()                         
    sys.exit(2)       

os.environ["zope_i18n_allowed_languages"] = "en fr pt sw en-ke it"
domain = 'bungeni.core' # can be bungeni.ui or bungeni.models
path = 'src/bungeni.main'
for opt, arg in opts:                
    if opt in ("-p", "--path"):      
        path = arg
    if opt in ("-d", "--domain"):      
        domain = arg

print 'generate locales for domain: ', domain, ' in: ', path
print  
      
if __name__ == '__main__':
    lovely.recipe.i18n.i18nextract.main(['i18nextract', 
        '-d', domain, 
        '-s', '/home/undesa/cinst/bungeni/parts/i18n/configure.zcml', 
        '-p', path, 
        '-o', 'locales'])
}}}

the `-d` option specifies the package domain (bungeni.core, bungeni.models or bungeni.ui) -- the pot files are generated in the src/bungeni.main/locales folder -- you will need to copy them to the locales folder of the specific package


= How to generate a PO files =

PO files are generated using the i18nmergeall script in the buildout bin folder.

The default version of this script is defective and the following changes need to be made to it :

Right at the bottom of the script -- replace the part after the import with the following 
{{{
import lovely.recipe.i18n.i18nmergeall
import sys, os

os.environ["zope_i18n_allowed_languages"] = "en fr pt sw en-ke it"


if __name__ == '__main__':
    lovely.recipe.i18n.i18nmergeall.main(['i18nmergeall', '-l', 'src/bungeni.main/bungeni/models/locales'])

}}}
The `-l` parameter needs to be set to the appropriate package to generate the PO files.

The following script is useful for merging generated .po files into a svn checkout hierarchy of the bungeni.main source 

{{{
 cd checkout_folder_for_bungeni.main
 cd bungeni/models/locales
 ## we want to get the newly generated PO files from the bungeni installation under the cinst folder
 for po in `find . -name '*.po'`;  do cp `echo /home/undesa/cinst/bungeni/src/bungeni.main/bungeni/models/locales${po:1}` $po ; done

}}}

= Manually regenerating .mo files = 

.MO files are generated by the buildout and are indexed message files used by the system for faster retrieval of message strings.
Sometimes you may want to generate and update these manually as it is faster than running the buildout.

You can manually compile .mo files using `gettext` :
{{{
# install gettext 
sudo apt-get install gettext 

# generate the mo files
cd ./cinst/bungeni/src/bungeni.main/bungeni
for po in `find . -name "*.po"` ; do msgfmt -o `dirname $po`/`basename $po .po`.mo $po; done
}}}